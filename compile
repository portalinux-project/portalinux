#!/bin/sh
set -e

pldir="$(dirname $(realpath $0))"
plfiles="$pldir/pl-files"
logfile="$pldir/log.txt"
build="$pldir/build"
output="$pldir/output"
output_rootfs="$output/rootfs"
output_initramfs="$output/initramfs"
toolchain_prefix="$(echo ~/cross)"
compression="bzip2"
threads=$(nproc)

kernel_url="http://kernel.org/pub/linux/kernel/v5.x/linux-5.19.8.tar.xz"

kdefconfig="defconfig"
compile_target="i486-pocket-linux-gnu"
linux_arch="i386"
specific_arch="i486"
arch="i486"
abi=""
dist="gnu"

linux_dir=""
binutils_dir=""
gcc_dir=""
gmp_dir=""
mpc_dir=""
mpfr_dir=""
musl_dir=""
gnu_dir=""
busybox_dir=""
bash_dir=""
make_dir=""

start_time=""
end_time=""

_get_pkg_names(){
	local dirlist="$(ls $build)"
	cd "$build"

	linux_dir="$(realpath $(echo $dirlist | grep 'linux.[0-9,a-z,A-Z,\.]*' -o))"
	binutils_dir="$(realpath $(echo $dirlist | grep 'binutils.[0-9,a-z,A-Z,\.]*' -o))"
	gcc_dir="$(realpath $(echo $dirlist | grep 'gcc.[0-9,a-z,A-Z,\.]*' -o))"
	gmp_dir="$(realpath $(echo $dirlist | grep 'gmp.[0-9,a-z,A-Z,\.]*' -o))"
	mpc_dir="$(realpath $(echo $dirlist | grep 'mpc.[0-9,a-z,A-Z,\.]*' -o))"
	mpfr_dir="$(realpath $(echo $dirlist | grep 'mpfr.[0-9,a-z,A-Z,\.]*' -o))"
	busybox_dir="$(realpath $(echo $dirlist | grep 'busybox.[0-9,a-z,A-Z,\.]*' -o))"
	bash_dir="$(realpath $(echo $dirlist | grep 'bash.[0-9,a-z,A-Z,\.]*' -o))"
	make_dir="$(realpath $(echo $dirlist | grep 'make.[0-9,a-z,A-Z,\.]*' -o))"

	if [ "$dist" = "musl" ]; then
		musl_dir="$(realpath $(echo $dirlist | grep 'musl.[0-9,a-z,A-Z,\.]*' -o))"
	else
		gnu_dir="$(realpath $(echo $dirlist | grep 'glibc.[0-9,a-z,A-Z,\.]*' -o))"
	fi
}

_generate_stuff(){
	case $1 in
		"musl")
			if [ "$arch" != "aarch64" ]; then
				echo $linux_arch
			else
				echo "aarch64"
			fi
			;;
		"pkg_ver")
			pkg_dir="$(ls $build | grep '$2.[0-9,a-z,A-Z,\.]*' -o))"
			echo "$pkg_dir" | rev | cut -d- -f1 | rev
			;;
	esac
}

_get_deps(){
	local URL="$kernel_url http://busybox.net/downloads/busybox-1.34.1.tar.bz2"
	local PKG="binutils/binutils-2.37.tar.gz gcc/gcc-10.3.0/gcc-10.3.0.tar.gz gmp/gmp-6.2.1.tar.xz mpc/mpc-1.2.1.tar.gz mpfr/mpfr-4.1.0.tar.gz bash/bash-5.1.tar.gz make/make-4.3.tar.gz"

	if [ "$dist" = "musl" ]; then
		URL="$URL https://musl.libc.org/releases/musl-1.2.3.tar.gz"
	else
		PKG="$PKG libc/glibc-2.31.tar.gz"
	fi

	if [ "$2" = "experimental" ]; then
		URl="$URL https://www.x.org/releases/X11R7.7/src/xserver/xorg-server-1.12.2.tar.bz2"
		PKG="$PKG nano/nano-5.8.tar.gz ncurses/ncurses-6.2.tar.gz bison/bison-3.7.6.tar.gz"
	fi

	for i in $PKG; do
		URL="$URL https://ftp.gnu.org/gnu/$i"
	done

	mkdir -p tarballs
	cd tarballs

	for i in $URL; do
		if [ ! -f "$(basename $i)" ]; then
			printf "Downloading $(basename $i)..."
			wget -q --show-progress --progress=dot:giga "$i" $1
			local retVar=$?
			if [ $retVar -ne 0 ]; then
				echo "Error."
				echo "There was an error downloading required sources"
				cd .. && rm -rf tarballs
				exit 1
			fi
			echo "Done."
		else
			echo "$(basename $i) has already been downloaded. Skipping..."
		fi
	done
}

#_validate_deps(){}

_decompress_all(){
	for i in $(ls | grep .tar); do
		printf "Unpacking archive $i..."
		case $i in
			*.gz)
				gunzip -c "$i" | tar xf -
				;;
			*.bz2)
				bunzip2 -c "$i" | tar xf -
				;;
			*.xz)
				xz -dc "$i" | tar xf -
				;;
		esac
		echo "Done."
	done
	echo "Decompressed all files successfully"
}

_runtime_calc(){
	set +e
	case $1 in
		start)
			start_time="$(date +%s)"
			printf "Operation started at $(date --date=@$start_time)\n\n"
			;;
		stop)
			end_time="$(date +%s)"
			local runtime="$(expr $end_time - $start_time)"
			local hours="$(expr $runtime / 3600)"
			local minutes=0
			printf "Operation took "

			if [ $hours -ne 0 ]; then
				printf "$hours hours"
				runtime="$(expr $runtime - $(expr $hours '*' 3600))"
				if [ $runtime -gt 60 ]; then
					printf ", "
				else
					printf " and "
				fi
			fi
			minutes="$(expr $runtime / 60)"

			if [ $minutes -ne 0 ]; then
				printf "$minutes minutes and "
				runtime="$(expr $runtime - $(expr $minutes '*' 60))"
			fi

			echo "$runtime seconds to complete"
			;;
	esac
	set -e
}

_parse_platform(){
	case $specific_arch in
		android32 | earm)
			specific_arch="armv7"
			dist="musl"
			;;
		android64 | earm64)
			specific_arch="aarch64"
			dist="musl"
			;;
		pc | pc32)
			specific_arch="i486"
			dist="musl"
			;;
		pc64)
			specific_arch="x86_64"
			dist="gnu"
			;;
		*)
			echo "Error: Unknown platform"
			exit 5
			;;
	esac
}

_rootfs_cleanup(){
	printf "Deleting unnecessary files..."
	for i in $(find "$output_rootfs/opt" -type f); do
		rm -f "$i"
		printf "."
	done
	echo "Done."
}

compile_toolchain(){
	local extra_flags=""
	local common_flags="$compile_target --disable-multilib"
	local gnu_flags="$common_flags --with-arch=$specific_arch --disable-werror"

	# binutils
	if [ ! -r "$toolchain_prefix/bin/$compile_target-as" ]; then
		mkdir -p "$binutils_dir/build"
		cd "$binutils_dir/build"
		if [ ! -r "$binutils/build/Makefile" ]; then
			printf "Configuring Binutils..."
			script -qeac "../configure --prefix=$toolchain_prefix --target=$gnu_flags 2>&1" "$logfile" >/dev/null
			echo "Done."
		fi
		printf "Compiling Binutils..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done\nInstalling Binutils..."
		script -qeac "make install-strip 2>&1" "$logfile" >/dev/null
		echo "Done."
	fi

	# gcc c/c++ compilers
	if [ ! -r "$toolchain_prefix/bin/$compile_target-gcc" ]; then
		if [ ! -f "$gcc_dir/mpfr" ]; then
			set +e
			ln "$gmp_dir" "$gcc_dir/gmp" -s 2>/dev/null
			ln "$mpc_dir" "$gcc_dir/mpc" -s 2>/dev/null
			ln "$mpfr_dir" "$gcc_dir/mpfr" -s 2>/dev/null
			set -e
		fi

		if [ "$dist" = "musl" ]; then
			extra_flags="--disable-libsanitizer --enable-initfini-array"
		fi

		mkdir -p "$gcc_dir/build"
		cd "$gcc_dir/build"
		if [ ! -r "$gcc_dir/build/Makefile" ]; then
			printf "Configuring GCC..."
			script -qeac "../configure --prefix=$toolchain_prefix --target=$gnu_flags --enable-languages=c,c++ --disable-libstdcxx-debug --disable-bootstrap $extra_flags" "$logfile" >/dev/null
			echo "Done."
		fi
		printf "Compiling GCC C/C++ compilers..."
		script -qeac "make -j$threads all-gcc 2>&1" "$logfile" >/dev/null
		printf "Done\nInstalling GCC C/C++ compilers..."
		script -qeac "make install-strip-gcc 2>&1" "$logfile" >/dev/null
		echo "Done."
	fi

	# linux headers
	if [ ! -r "$toolchain_prefix/$compile_target/include/linux" ]; then
		cd "$linux_dir"
		printf "Installing Linux headers..."
		script -qeac "make ARCH=$linux_arch INSTALL_HDR_PATH=$toolchain_prefix/$compile_target headers_install 2>&1" "$logfile" >/dev/null
		echo "Done."
	fi

	# libc headers + start files (glibc-only)
	if [ ! -r "$toolchain_prefix/$compile_target/include/stdio.h" ]; then
		if [ "$dist" = "musl" ]; then
			cd "$musl_dir"
			printf "Installing musl headers..."
			script -qeac "make ARCH=$arch prefix=$toolchain_prefix/$compile_target install-headers 2>&1" "$logfile" >/dev/null
			echo "Done."
		else
			mkdir -p "$gnu_dir/build"
			cd "$gnu_dir/build"
			if [ ! -r "$gnu_dir/build/Makefile" ]; then
				printf "Configuring glibc..."
				script -qeac "../configure --prefix=$toolchain_prefix/$compile_target --host=$gnu_flags --with-headers=$toolchain_prefix/$compile_target/include libc_cv_forced_unwind=yes 2>&1" "$logfile" >/dev/null
				echo "Done."
			fi
			printf "Installing glibc headers..."
			script -qeac "make install-bootstrap-headers=yes install-headers 2>&1" "$logfile" >/dev/null
			printf "Done.\nCompiling and installing glibc start files..."
			script -qeac "make -j$threads csu/subdir_lib CFLAGS_FOR_TARGET='-s -O2' CXXFLAGS_FOR_TARGET='-s -O2' 2>&1" "$logfile" >/dev/null
			install csu/crti.o csu/crtn.o csu/crt1.o "$toolchain_prefix/$compile_target/lib"
			echo "Done."
		fi
	fi

	# libgcc (libgcc-static for musl)
	if [ ! -r "$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a" ]; then
		cd "$gcc_dir/build"
		printf "Compiling libgcc"
		if [ "$dist" = "musl" ]; then
			printf "%s" "-static..."
			extra_flags="enable_shared=no"
		else
			printf "..."
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs.h"
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs-32.h"
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs-64.h"
			$compile_target-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o "$toolchain_prefix/$compile_target/lib/libc.so"
		fi
		script -qeac "make -j$threads $extra_flags all-target-libgcc 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling libgcc..."
		script -qeac "make install-strip-target-libgcc 2>&1" "$logfile" >/dev/null
		echo "Done."
		rm -rf "$toolchain_prefix/$compile_target/lib/libc.so"
	fi

	# libc
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libc.so" ]; then
		if [ "$dist" = "musl" ]; then
			cd "$musl_dir"
			printf "Configuring musl..."
			script -qeac "ARCH=$arch CC=$compile_target-gcc CROSS_COMPILE=$compile_target- LIBCC=$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a ./configure --prefix=$toolchain_prefix/$compile_target --host=$common_flags 2>&1" "$logfile" >/dev/null
			printf "Done.\nCompiling musl..."
		else
			cd "$gnu_dir/build"
			printf "Compiling glibc..."
		fi

		script -qeac "make -j$threads AR=$compile_target-ar RANLIB=$compile_target-ranlib 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling libc..."
		script -qeac "make AR=$compile_target-ar RANLIB=$compile_target-ranlib install" "$logfile" >/dev/null
		echo "Done."
	fi

	# libgcc-shared (musl-only)
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libgcc_s.so" ]; then
		cd "$gcc_dir/build"
		printf "Cleaning libgcc..."
		script -qeac "make -C $compile_target/libgcc distclean 2>&1" "$logfile" >/dev/null
		printf "Done.\nCompiling libgcc-shared..."
		script -qeac "make enable_shared=yes all-target-libgcc 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling libgcc..."
		script -qeac "make install-strip-target-libgcc 2>&1" "$logfile" >/dev/null
		echo "Done."
	fi

	# libstdc++
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libstdc++.so" ]; then
		cd "$gcc_dir/build"
		printf "Compiling libstdc++..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling libstdc++..."
		script -qeac "make install-strip 2>&1" "$logfile" >/dev/null
		printf "Done.\n\n"
	fi
}

compile_rootfs(){
	if [ ! -r "$toolchain_prefix/bin/$compile_target-gcc" ]; then
		echo "Error: You do not have the compiler for system $compile_target installed. Please run $0 --build toolchain and try again"
		exit 1
	fi
	local common_flags="--with-sysroot=/ --host=$compile_target --datarootdir=/opt/share --includedir=/opt/include"
	local included_comp="--prefix=/usr $common_flags"
	local main_comp="$included_comp --disable-multilib"

	printf "Creating rootfs structure..."
	for i in bin dev sys proc lib opt sbin usr/bin usr/lib usr/sbin root mnt home tmp; do
		mkdir -p "$output_rootfs/$i"
		printf "."
	done
	echo "Done."

	if [ ! -r "$output_rootfs/usr/lib/libc.a" ]; then
		if [ "$dist" = "musl" ]; then
			cd "$musl_dir"
			printf "Configuring musl..."
			script -qeac "./configure $main_comp 2>&1" "$logfile" >/dev/null
			printf "Done.\nCompiling musl..."
		else
			mkdir -p "$gnu_dir/build"
			cd "$gnu_dir/build"
			if [ ! -r "$gnu_dir/build/Makefile" ]; then
				printf "Configuring glibc..."
				script -qeac "../configure $main_comp libc_cv_forced_unwind=yes CFLAGS='-s -O2' CXXFLAGS='-s -O2' 2>&1" "$logfile" >/dev/null
				echo "Done."
			fi
			printf "Compiling glibc..."

			mkdir -p "$output_rootfs/opt/include/gnu"
			touch "$output_rootfs/opt/include/gnu/stubs.h"
			touch "$output_rootfs/opt/include/gnu/stubs-32.h"
			touch "$output_rootfs/opt/include/gnu/stubs-64.h"
		fi

		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done\nInstalling libc..."
		script -qeac "make DESTDIR=$output_rootfs install 2>&1" "$logfile" >/dev/null
		printf "Done.\nPackaging libc headers..."
		mkdir -p "$output/$dist-libc-headers/files/opt"
		cp -r "$output_rootfs/opt/include" "$output/$dist-libc-headers/files/opt"
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/bin/busybox" ]; then
		cd "$busybox_dir"

		printf "Configuring BusyBox..."
		script -qeac "make defconfig 2>&1" "$logfile" >/dev/null
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$compile_target-" >> .config
		printf "Done.\nCompiling BusyBox..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling Busybox..."
		mv busybox "$output_rootfs/bin"
		set +e
		ln -s "/bin/busybox" "$output_rootfs/bin/sh" 2>/dev/null
		set -e
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/init" ]; then
		printf "Installing init script..."
		cp "$plfiles/initramfs-init" "$output_rootfs/init"
		chmod 777 "$output_rootfs/init"
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/etc" ]; then
		printf "Installing etc files..."
		cp -r "$plfiles/etc" "$output_rootfs"
		chmod 777 "$output_rootfs/etc/init.d/rcS"
		if [ "$dist" = "musl" ]; then
			mv "$output_rootfs/etc/ld.so.conf" "$output_rootfs/etc/ld-musl-$(_generate_stuff musl).path"
		fi
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/usr/bin/pl-install" ]; then
		printf "Installing PortaLinux Package Installer..."
		cp "$plfiles/pl-utils/pl-install" "$output_rootfs/usr/bin"
		chmod 777 "$output_rootfs/usr/bin/pl-install"
		echo "Done."
	fi
}

create_boot_image(){
	_rootfs_cleanup

	if [ $(id -u) -ne 0 ]; then
		echo "Error: You are not root"
		exit 3
	fi

	set +e
	printf "Creating necessary device nodes..."
	mknod "$output_rootfs/dev/console" c 5 1 2>/dev/null
	mknod "$output_rootfs/dev/tty" c 5 0 2>/dev/null
	mknod "$output_rootfs/dev/null" c 1 3 2>/dev/null
	echo "Done."
	set -e

	if [ "$1" != "no-create-cpio" ]; then
		printf "Creating initramfs boot file..."
		cd "$output_rootfs"
		find . | cpio -H newc -ov > $output/rootfs.cpio 2>/dev/null
		$compression $output/rootfs.cpio
		echo "Done"
	fi
}

compile_extra_pkgs(){
	if [ ! -r "$output_rootfs" ]; then
		compile_rootfs
	fi
	local common_flags="--prefix=/opt --host=$compile_target"
	local dev_stuff="$common_flags --disable-multilib --with-sysroot=/ --with-build-sysroot=$output_rootfs --with-native-system-header-dir=/opt/include"

	printf "Creating build folders..."
	for i in libstdc++ gcc linux-headers binutils bash make; do
		mkdir -p "$output/$i/files"
		printf "."
	done
	echo "Done"

	if [ ! -d "$output/libstdc++/files/opt" ]; then
		set +e
		if [ ! -f "$gcc_dir/mpfr" ]; then
			ln "$gmp_dir" "$gcc_dir/gmp" -s 2>/dev/null
			ln "$mpc_dir" "$gcc_dir/mpc" -s 2>/dev/null
			ln "$mpfr_dir" "$gcc_dir/mpfr" -s 2>/dev/null
		fi

		ln -s "$toolchain_prefix/bin/$compile_target-gcc" "$toolchain_prefix/bin/cc" 2>/dev/null
		ln -s "$toolchain_prefix/bin/$compile_target-g++" "$toolchain_prefix/bin/c++" 2>/dev/null
		set -e

		mkdir -p "$gcc_dir/build"
		cd "$gcc_dir/build"

		if [ ! -r "$gcc_dir/build/Makefile" ]; then
			printf "Configuring GCC..."
			script -qeac "../configure $dev_stuff --disable-bootstrap --disable-libstdcxx-debug --enable-languages=c,c++ --disable-libsanitizer 2>&1" "$logfile" >/dev/null
			echo "Done."
		fi
		printf "Compiling GCC..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done.\nPackaging GCC C/C++ Compilers..."
		script -qeac "make install-strip-gcc DESTDIR=$output/gcc/files 2>&1" "logfile" >/dev/null
		printf "Done.\nPackaging libgcc..."
		script -qeac "make install-strip-target-libgcc DESTDIR=$output/libstdc++/files 2>&1" "$logfile" >/dev/null
		printf "Done.\nPackaging libstdc++..."
		script -qeac "make install-strip-target-libstdc++-v3 DESTDIR=$output/libstdc++/files 2>&1" "$logfile" >/dev/null
		echo "Done."
		if [ "$dist" = "gnu" ]; then
			printf "Packaging libsanitizer..."
			script -qeac "make install-strip-target-ligsanitizer DESTDIR=$output/libsanitizer/files 2>&1" "$logfile" >/dev/null
			echo "Done."
		fi

		rm "$toolchain_prefix/bin/cc" -f
		rm "$toolchain_prefix/bin/c++" -f
		cd ../..
	fi

	if [ ! -d "$output/linux-headers/files/opt" ]; then
		cd "$linux_dir"

		printf "Packaging Linux headers..."
		script -qeac "make ARCH=$linux_arch INSTALL_HDR_PATH=$output/linux-headers/files/opt headers_install 2>&1" >/dev/null
		echo "Done."
		cd ..
	fi

	if [ ! -r "$output/binutils/files/opt" ]; then
		mkdir -p "$binutils_dir/build"
		cd "$binutils_dir/build"

		if [ ! -r "$binutils_dir/build/Makefile" ]; then
			printf "Configuring Binutils..."
			script -qeac "../configure $dev_stuff 2>&1" >/dev/null
			echo "Done."
		fi
		printf "Compiling Binutils..."
		script -qeac "make -j$threads 2>&1" >/dev/null
		printf "Done.\nPackaging Binutils"
		script -qeac "make install-strip DESTDIR=$output/binutils/files 2>&1" >/dev/null
		echo "Done."
		cd ../..
	fi

	if [ ! -r "$output/bash/files/opt" ]; then
		mkdir -p "$bash_dir/build"
		cd "$bash_dir/build"

		if [ ! -r "$bash_dir/build/Makefile" ]; then
			printf "Configuring GNU Bash..."
			script -qeac "../configure $common_flags 2>&1" "$logfile" >/dev/null
			echo "Done."
		fi
		printf "Compiling GNU Bash..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done.\nPackaging GNU Bash..."
		script -qeac "make install DESTDIR=$output/bash/files 2>&1" "$logfile" >/dev/null
		echo "Done."
	fi

	if [ ! -r "$output/make/files/opt/" ]; then
		mkdir -p "$make_dir/build"
		cd "$make_dir/build"

		if [ ! -r "$make_dir/build/Makefile" ]; then
			printf "Configuring Make..."
			script -qeac "../configure $common_flags 2>&1" >/dev/null
			echo "Done."
		fi
		printf "Compiling Make..."
		script -qeac "make -j$threads 2>&1" >/dev/null
		printf "Done.\nPackaging Make..."
		script -qeac "make install-strip DESTDIR=$output/make/files 2>&1" >/dev/null
		echo "Done."
	fi

	_rootfs_cleanup

	printf "Creating packages..."
	for i in musl-libc-headers libstdc++ gcc linux-headers binutils bash make; do
		cd "$output/$i"
		tar cf files.tar files
		sha256sum files.tar > files.tar.sha256sum
		echo "$i" > pkg_info
		_generate_stuff pkg_ver $i >> pkg_info

		tar cf ../$i.tar files.tar files.tar.sha256sum
		bzip2 ../$i.tar
		mv ../$i.tar.bz2 ../$i.plpak
		rm -rf files
		printf "."
	done
	echo "Done."
}

compile_kernel(){
	cd "$linux_dir"

	if [ ! -f .config ]; then
		echo "Error: Kernel has not been configured yet. Run $0 --config-kernel and try again"
		exit 4
	fi

	script -qeac "make CROSS_COMPILE=$compile_target- ARCH=$linux_arch -j$threads" "$logfile"
	script -qeac "make CROSS_COMPILE=$compile_target- ARCH=$linux_arch INSTALL_MOD_PATH=$output_rootfs modules_install" "$logfile"
	cp arch/$linux_arch/boot/dts/*.dts 2>/dev/null || true
	cp arch/$linux_arch/boot/*Image "$output"
}

echo "PortaLinux Build System v0.08"
printf "(c) 2022 pocketlinux32 & raisinware, Under GPLv2+\n\n"

if [ $# -eq 0 ]; then
	echo "Error: No command given. Run $0 --help for a list of supported commands"
	exit 1
fi

while [ $# -gt 0 ]; do
	case $1 in
		"--init")
			_runtime_calc start
			if [ -d $build ]; then
				printf "Detected old build files, removing..."
				rm -rf $build
				echo "Done."
			fi

			_get_deps $2 $3
			mkdir -p $build
			cd $pldir/tarballs
			_decompress_all
			for i in $(ls); do
				if [ -d $i ]; then
					mv $i $build
				fi
			done

			_get_pkg_names
			mkdir $toolchain_prefix $output -p
			if [ "$dist" = "musl" ]; then
				for i in arch crt; do
					cd "$musl_dir/$i"
					for j in i486 i586 i686; do
						ln i386 $j -s
					done
					cd ..
				done
			else
				sed -i 's/limits.h/linux\/limits.h/g' "$gcc_dir/libsanitizer/asan/asan_linux.cpp"
				sed -i '20 i #include <bits/xopen_lim.h>' "$busybox_dir/include/libbb.h"
			fi
			_runtime_calc stop
			exit 0
			;;
		"--target-system")
			specific_arch=$(echo $2 | cut -d- -f1)
			dist=$(echo $2 | cut -d- -f2)

			if [ "$specific_arch" = "$dist" ]; then
				_parse_platform $2
			fi

			if [ $(echo "$specific_arch" | grep -c arm) -ne 0 ]; then
				arch="arm"
				abi="eabi"
				linux_arch="$arch"
				if [ $(echo "$specific_arch" | grep -c 7) -ne 0 ]; then
					abi="eabihf"
				fi
			elif [ $(echo "$specific_arch" | grep -c 86) -ne 0 ]; then
				arch="$specific_arch"
				if [ $(echo "$specific_arch" | grep -c i) -ne 0 ]; then
					linux_arch="i386"
				else
					linux_arch="x86"
				fi
			else
				arch="$specific_arch"
				if [ "$specific_arch" = "aarch64" ]; then
					linux_arch="arm64"
				else
					linux_arch="$arch"
				fi
			fi

			compile_target="$arch-pocket-linux-$dist$abi"
			shift
			;;
		"--toolchain-prefix")
			toolchain_prefix="$2"
			shift
			;;
		"--test")
			set +e
			case $2 in
				toolchain)
					$compile_target-gcc --version
					;;
				pkg_parser)
					if [ ! -r "$build" ]; then
						echo "Error: You haven't initialized yet! Run $0 --init and try again"
						exit 6
					fi

					_get_pkg_names
					printf "$linux_dir\n$binutils_dir\n$gcc_dir\n$gmp_dir\n$mpc_dir\n$mpfr_dir\n$musl_dir\n$gnu_dir\n$busybox_dir\n$bash_dir\n"
					;;
				defconfig)
					if [ "$3" != "" ]; then
						kdefconfig=$4
					fi

					echo "Default config is $kdefconfig"
					;;

			esac
			exit 0
			;;
		"--clean")
			_runtime_calc start
			set +e
			mode=2

			if [ "$2" != "" ]; then
				mode="$2"
			fi

			for i in $(ls "$build"); do
				printf "Cleaninig $i..."
				if [ -d "$build/$i/build" ]; then
					if [ $mode -eq 1 ]; then
						cd "$build/$i/build"
						make -s clean >/dev/null 2>&1
						shift
					else
						rm -rf $build/$i/build
					fi
				elif [ -r $build/$i/Makefile ]; then
					cd $build/$i
					make -s clean >/dev/null 2>&1
					make -s distclean >/dev/null 2>&1
				fi
				echo "Done."
			done

			if [ $mode -eq 3 ]; then
				printf "Deleting output directory..."
				rm -rf "$output"
				echo "Done."
				shift
			fi
			rm -f "$logfile"
			_runtime_calc stop
			exit 0
			;;
		"--hard-clean")
			_runtime_calc start
			rm -rfv "$build" "$output" "$logfile"
			if [ $(echo "$2" | grep "no-rm-t" -c) -ne 0 ]; then
				shift
			else
				rm -rfv "$pldir/tarballs"
			fi
			_runtime_calc stop
			exit 0
			;;
		"--threads")
			threads=$2
			shift
			;;
		"--build")
			action=$2
			if [ "$2" = "boot-img" ] && [ "$3" != "" ]; then
				compression = "$3"
			fi
			shift
			;;
		"--config-kernel")
			_get_pkg_names
			cd "$linux_dir"

			if [ "$3" != "" ]; then
				kdefconfig=$3
			fi

			if [ ! -f .config ]; then
				make ARCH=$linux_arch $kdefconfig
			fi

			make ARCH=$linux_arch menuconfig
			exit 0
			;;
		"--help")
			printf "Usage: $0 {--target-system|--threads} [--init|--clean|--hard-clean|--build] [value]\n\n"
			echo "--init [dist]			Initializes the build system by downloading necessary components and unpacking them"
			echo "--target-system [arch-dist]	Specifies the CPU architecture and the C library to be used. Default: i486-gnu"
			echo "--toolchain-prefix [path]	Sets the target system's toolchain's install directory. Default: ~/cross"
			echo "--clean [lvl]			Cleans the build directory"
			echo "--hard-clean [no-rm-tarballs]	Removes any directories created by --init"
			echo "--threads [n]			Sets the amount of threads to be used in compilation"
			echo "--config-kernel			Configures the Linux kernel"
			echo "--build [action]		Compiles toolchain, rootfs, extra-pkg, kernel or boot-img. The previous list of words are the supported operations."
			exit 0
			;;
		*)
			echo "Error: Unrecognized command. Run $0 --help for a list of supported commands."
			exit 2
			;;
	esac
	shift
done

echo "Log file: $logfile"
echo "Target System: $compile_target"
printf "Toolchain install directory: $toolchain_prefix\n\n"
_runtime_calc start
_get_pkg_names $dist
case $action in
	toolchain)
		compile_toolchain
		;;
	rootfs)
		compile_rootfs
		;;
	extra-pkgs)
		compile_extra_pkgs
		;;
	kernel)
		compile_kernel
		;;
	boot-img)
		create_boot_image
		;;
	*)
		echo "Error: Unknown build command. Run $0 --help for a list of supported commands."
		exit 4
		;;
esac
_runtime_calc stop
