#!/bin/sh
set -e

alias source="." # make source work on posix shells

pldir="$(dirname $(realpath $0))"
plfiles="$pldir/pl-files"
logfile="$pldir/log.txt"
build="$pldir/build"
output="$pldir/output"
output_rootfs="$output/rootfs"
output_initramfs="$output/initramfs"
toolchain_prefix="$(echo ~/cross)"
compression="bzip2"
threads=$(nproc)

source "$plfiles/compile-modules/urls.sh"

kdefconfig="defconfig"
extra_gcc_flags=""
compile_target="i486-pocket-linux-musl"
linux_arch="i386"
specific_arch="i486"
arch="i486"
dist="musl"
libdir="lib"
grub_platform="efi"
abi=""
with_aoc=""

linux_dir=""
binutils_dir=""
gcc_dir=""
gmp_dir=""
mpc_dir=""
mpfr_dir=""
libc_dir=""
coreutils_dir=""
bash_dir=""
make_dir=""
nano_dir=""
ncurses_dir=""
python_dir=""
grub_dir=""

start_time=""
end_time=""

_exit_handler(){
	exit_num=$?

	if [ $exit_num -ne 0 ]; then
		if [ $exit_num -eq 130 ]; then
			echo "Interrupt!"
		else
			printf "\nSomething wrong happened. Please check $(basename $logfile) or the output above for more info.\n"
		fi
	fi

	exit $exit_num
}

_exec(){
	set +e
	printf "$1..."
	if [ "$4" = "no-silent" ] || [ "$3" = "no-silent" ]; then
		script -qeac "$2" "$logfile"
	else
		script -qeac "$2 2>&1" "$logfile" >/dev/null
	fi
	errno=$?
	if [ $errno -ne 0 ]; then
		echo "Error!"
		if [ "$3" = "" ]; then
			$3
		fi
		exit $errno
	fi
	echo "Done."
	set -e
}

_get_pkg_names(){
	dirlist="$(ls $build)"
	cd "$build"

	linux_dir="$(realpath $(echo $dirlist | grep 'linux.[0-9,a-z,A-Z,\.,\-]*' -o))"
	binutils_dir="$(realpath $(echo $dirlist | grep 'binutils.[0-9,a-z,A-Z,\.]*' -o))"
	gcc_dir="$(realpath $(echo $dirlist | grep 'gcc.[0-9,a-z,A-Z,\.]*' -o))"
	gmp_dir="$(realpath $(echo $dirlist | grep 'gmp.[0-9,a-z,A-Z,\.]*' -o))"
	mpc_dir="$(realpath $(echo $dirlist | grep 'mpc.[0-9,a-z,A-Z,\.]*' -o))"
	mpfr_dir="$(realpath $(echo $dirlist | grep 'mpfr.[0-9,a-z,A-Z,\.]*' -o))"
	coreutils_dir="$(realpath $(echo $dirlist | grep '[0-9,a-z,A-Z,\.]*.box.[0-9,a-z,A-Z,\.]*' -o))"
	bash_dir="$(realpath $(echo $dirlist | grep 'bash.[0-9,a-z,A-Z,\.]*' -o))"
	make_dir="$(realpath $(echo $dirlist | grep 'make.[0-9,a-z,A-Z,\.]*' -o))"
	nano_dir="$(realpath $(echo $dirlist | grep 'nano.[0-9,a-z,A-Z,\.]*' -o))"
	ncurses_dir="$(realpath $(echo $dirlist | grep 'ncurses.[0-9,a-z,A-Z,\.]*' -o))"
	grub_dir="$(realpath $(echo $dirlist | grep 'grub.[0-9,a-z,A-Z,\.]*' -o))"
#	python_dir="$(realpath $(echo $dirlist | grep 'python.[0-9,a-z,A-Z,\.]*' -o))"

	if [ "$dist" = "gnu" ]; then
		libc_dir="$(realpath $(echo $dirlist | grep 'glibc.[0-9,a-z,A-Z,\.]*' -o))"
	else
		libc_dir="$(realpath $(echo $dirlist | grep 'musl.[0-9,a-z,A-Z,\.]*' -o))"
	fi
}

_generate_stuff(){
	case $1 in
		"musl")
			if [ "$arch" != "aarch64" ]; then
				echo $linux_arch
			else
				echo "aarch64"
			fi
			;;
		"pkg_ver")
			set +e
			pkg=$2
			if [ "$2" = "musl-libc-headers" ]; then
				pkg="musl"
			elif [ "$2" = "gnu-libc-headers" ]; then
				pkg="glibc"
			elif [ "$2" = "libstdc++" ]; then
				pkg="gcc"
			elif [ "$2" = "linux-headers" ]; then
				pkg="linux"
			fi
			set -e

			pkg_dir=$(ls $build | grep "$pkg")
			echo "$pkg_dir" | rev | cut -d- -f1 | rev
			;;
		"libdir")
			set +e
			if [ $(echo "$arch" | grep -c 64) -ne 0 ]; then
				libdir="lib64"
			fi
			set -e
			;;
	esac
}

_setup_gcc(){
	if [ ! -r "$gcc_dir/mpfr" ]; then
		ln "$gmp_dir" "$gcc_dir/gmp" -s 2>/dev/null || true
		ln "$mpc_dir" "$gcc_dir/mpc" -s 2>/dev/null || true
		ln "$mpfr_dir" "$gcc_dir/mpfr" -s 2>/dev/null || true
	fi

	if [ "$1" = "rfs" ]; then
		ln -s "$toolchain_prefix/bin/$compile_target-gcc" "$toolchain_prefix/bin/cc" 2>/dev/null || true
		ln -s "$toolchain_prefix/bin/$compile_target-g++" "$toolchain_prefix/bin/c++" 2>/dev/null || true
	fi
}

_setup_glibc(){
	mkdir -p "$output_rootfs/opt/include/gnu"
	touch "$output_rootfs/opt/include/gnu/stubs.h"
	touch "$output_rootfs/opt/include/gnu/stubs-32.h"
	touch "$output_rootfs/opt/include/gnu/stubs-64.h"
	if [ "$1" = "tc" ]; then
		$compile_target-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o "$toolchain_prefix/$compile_target/lib/libc.so"
	fi
}

source "$plfiles/compile-modules/init.sh"
source "$plfiles/compile-modules/clean.sh"

_runtime_calc(){
	set +e
	case $1 in
		start)
			start_time="$(date +%s)"
			printf "Operation started at $(date --date=@$start_time)\n\n"
			;;
		stop)
			end_time="$(date +%s)"
			runtime="$(expr $end_time - $start_time)"
			hours="$(expr $runtime / 3600)"
			minutes=0
			printf "Operation took "

			if [ $hours -ne 0 ]; then
				printf "$hours hours"
				runtime="$(expr $runtime - $(expr $hours '*' 3600))"
				if [ $runtime -gt 60 ]; then
					printf ", "
				else
					printf " and "
				fi
			fi
			minutes="$(expr $runtime / 60)"

			if [ $minutes -ne 0 ]; then
				printf "$minutes minutes and "
				runtime="$(expr $runtime - $(expr $minutes '*' 60))"
			fi

			echo "$runtime seconds to complete"
			;;
	esac
	set -e
}

_parse_platform(){
	set +e
	case $1 in
		android32 | earm)
			specific_arch="armv7"
			dist="musl"
			;;
		android64 | earm64)
			specific_arch="aarch64"
			dist="musl"
			;;
		pc | pc32)
			specific_arch="i486"
			dist="musl"
			;;
		pc64)
			specific_arch="x86_64"
			dist="gnu"
			;;
		*)
			if [ -f "$pldir/custom-platforms" ]; then
				. $pldir/custom-platforms $specific_arch
			fi

			if [ "$specific_arch" = "$dist" ]; then
				echo "Error: Unknown platform"
				exit 5
			fi
			;;
	esac
	set -e
}

_target_system(){
	specific_arch=$(echo $2 | cut -d- -f1)
	dist=$(echo $2 | cut -d- -f2)

	if [ "$specific_arch" = "$dist" ]; then
		_parse_platform $1
	fi

	if [ $(echo "$specific_arch" | grep -c arm) -ne 0 ]; then
		arch="arm"
		abi="eabi"
		linux_arch="$arch"
		with_aoc="--with-arch=$specific_arch"
		if [ $(echo "$specific_arch" | grep -c 7) -ne 0 ]; then
			abi="eabihf"
		fi
	elif [ $(echo "$specific_arch" | grep -c 86) -ne 0 ]; then
		arch="$specific_arch"
		if [ $(echo "$specific_arch" | grep -c i) -ne 0 ]; then
			linux_arch="i386"
		else
			linux_arch="x86_64"
		fi
	else
		arch="$specific_arch"
		if [ "$specific_arch" = "aarch64" ]; then
			linux_arch="arm64"
		else
			linux_arch="$arch"
		fi

		if [ "$arch" = "powerpc" ]; then
			with_aoc="--with-cpu=$specific_arch"
		fi
	fi

	compile_target="$arch-pocket-linux-$dist$abi"
}

_rootfs_cleanup(){
	printf "Deleting unnecessary files..."
	for i in $(find "$output_rootfs/opt" -type f); do
		rm -f "$i"
		printf "."
	done
	rm -rf "$output_rootfs/opt/*"
	echo "Done."
}

_compile_pkg(){
	if [ ! -r "$1" ]; then
		cd "$2"
		if [ ! -r "$2/Makefile" ]; then
			mkdir -p "build" && cd "build"
		fi

		if [ ! -r "./Makefile" ] || [ "$exec_conf" = "y" ]; then
			if [ "$dir" = "" ]; then
				dir=".."
			fi
			_exec "$3" "$dir/configure $4"
		fi

		while [ $# -gt 4 ]; do
			_exec "$5" "make -j$threads $6"
			shift 2
		done
	fi
}

setup_toolchain(){
	compile_gcc_toolchain
}

compile_gcc_toolchain(){
	extra_flags=""
	common_flags="$compile_target --disable-multilib"
	gnu_flags="$common_flags $with_aoc --disable-werror --disable-doc"
	libc_flags=""
	_get_pkg_names $dist

	# binutils
	_compile_pkg "$toolchain_prefix/bin/$compile_target-as" "$binutils_dir" "Configuring Binutils" "--prefix=$toolchain_prefix --target=$gnu_flags" "Compiling Binutils" "" "Installing Binutils" "install-strip"

	# gcc c/c++ compilers
	_setup_gcc cross
	if [ "$dist" = "musl" ]; then
		extra_flags="--disable-libsanitizer --enable-initfini-array"
	fi
	_compile_pkg "$toolchain_prefix/bin/$compile_target-gcc" "$gcc_dir" "Configuring GCC" "--prefix=$toolchain_prefix --target=$gnu_flags --enable-languages=c,c++ --disable-libstdcxx-debug --disable-bootstrap $extra_flags $extra_gcc_flags" "Compiling GCC C/C++ compilers" "all-gcc" "Installing GCC C/C++ compilers" "install-strip-gcc"

	# linux headers
	if [ ! -r "$toolchain_prefix/$compile_target/include/linux" ]; then
		cd "$linux_dir"
		_exec "Installing Linux headers" "make ARCH=$linux_arch INSTALL_HDR_PATH=$toolchain_prefix/$compile_target headers_install"
	fi

	# libc headers + start files (glibc-only)
	if [ ! -r "$toolchain_prefix/$compile_target/include/stdio.h" ]; then
		cd "$libc_dir"
		if [ "$dist" = "gnu" ]; then
			mkdir -p "build" && cd "build"
			if [ ! -r "$libc_dir/build/Makefile" ]; then
				_exec "Configuring glibc" "../configure --prefix=$toolchain_prefix/$compile_target --host=$gnu_flags --with-headers=$toolchain_prefix/$compile_target/include libc_cv_forced_unwind=yes"
			fi
			_exec "Compiling glibc start files" "make -j$threads csu/subdir_lib CFLAGS_FOR_TARGET='-s -O2' CXXFLAGS_FOR_TARGET='-s -O2'"
			_exec "Installing glibc start files" "install csu/crti.o csu/crtn.o csu/crt1.o '$toolchain_prefix/$compile_target/lib'"
			_exec "Installing glibc headers" "make install-bootstrap-headers=yes install-headers"
		else
			_exec "Installing musl headers" "make ARCH=$arch prefix=$toolchain_prefix/$compile_target install-headers"
		fi
	fi

	# libgcc (libgcc-static for musl)
	if [ ! -r "$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a" ]; then
		cd "$gcc_dir/build"
		name="libgcc"
		printf "Preparing to compile libgcc..."
		if [ "$dist" = "gnu" ]; then
			_setup_glibc tc
		else
			name="$name-static"
			extra_flags="enable_shared=no"
		fi
		echo "Done."
		_exec "Compiling $name" "make -j$threads $extra_flags all-target-libgcc"
		_exec "Installing libgcc" "make install-strip-target-libgcc"
		rm -rf "$toolchain_prefix/$compile_target/lib/libc.so"
	fi

	# libc
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libc.so" ]; then
		cd "$libc_dir"
		if [ "$dist" = "gnu" ]; then
			cd "build"
		else
			_exec "Configuring libc" "ARCH=$arch CC=$compile_target-gcc CROSS_COMPILE=$compile_target- LIBCC=$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a ./configure --prefix=$toolchain_prefix/$compile_target --host=$common_flags"
		fi

		_exec "Compiling libc" "make -j$threads AR=$compile_target-ar RANLIB=$compile_target-ranlib"
		_exec "Installing libc" "make AR=$compile_target-ar RANLIB=$compile_target-ranlib install"
	fi

	# libgcc-shared (musl-only)
	if [ ! -r "$toolchain_prefix/$compile_target/$libdir/libgcc_s.so" ]; then
		cd "$gcc_dir/build"
		_exec "Cleaning libgcc" "make -C $compile_target/libgcc distclean"
		_exec "Compiling libgcc-shared" "make enable_shared=yes -j$threads all-target-libgcc"
		_exec "Installing libgcc" "make install-strip-target-libgcc"
	fi

	# libstdc++
	_compile_pkg "$toolchain_prefix/$compile_target/$libdir/libstdc++.so" "$gcc_dir" "" "" "Compiling libstdc++" "" "Installing libstdc++" "install-strip-target-libstdc++-v3"

	# ncurses
	_compile_pkg "$toolchain_prefix/$compile_target/lib/libncurses.so" "$ncurses_dir" "Configuring Ncurses" "--prefix=$toolchain_prefix/$compile_target --host=$compile_target --with-cxx-shared --with-shared --enable-overwrite --with-termlib" "Compiling Ncurses" "" "Installing Ncurses" "install INSTALL_PROG='/usr/bin/install --strip-program=$compile_target-strip -c -s'"

	# ncursesw
	if [ -r "$ncurses_dir/build" ]; then
		_exec "Cleaning Ncurses" "rm -rf $ncurses_dir/build"
	fi
	_compile_pkg "$toolchain_prefix/$compile_target/lib/libncursesw.so" "$ncurses_dir" "Configuring NcursesW" "--prefix=$toolchain_prefix/$compile_target --host=$compile_target --with-cxx-shared --with-shared --enable-overwrite --with-termlib --enable-widec" "Compiling NcursesW" "" "Installing NcursesW" "install INSTALL_PROG='/usr/bin/install --strip-program=$compile_target-strip -c -s'"
}

compile_rootfs(){
	if [ ! -r "$toolchain_prefix/bin/$compile_target-gcc" ]; then
		echo "Error: You do not have the compiler for system $compile_target installed. Please run $0 --build toolchain and try again"
		exit 1
	fi
	common_flags="--with-sysroot=/ --host=$compile_target --datarootdir=/opt/share --includedir=/opt/include"
	included_comp="--prefix=/usr $common_flags"
	main_comp="$included_comp --disable-multilib"
	_get_pkg_names $dist

	printf "Creating rootfs structure..."
	for i in bin dev sys proc lib opt sbin usr/bin usr/lib usr/sbin root mnt home tmp var; do
		mkdir -p "$output_rootfs/$i"
		printf "."
	done
	echo "Done."

	if [ ! -r "$output_rootfs/usr/lib/libc.a" ]; then
		cd "$libc_dir"
		if [ "$dist" = "gnu" ]; then
			mkdir -p "build" && cd "build"
			if [ ! -r "$libc_dir/build/Makefile" ]; then
				_exec "Configuring glibc" "../configure $main_comp libc_cv_forced_unwind=yes CFLAGS='-s -O2' CXXFLAGS='-s -O2'"
			fi

			_exec "Preparing for compilation" "_setup_gcc"
		else
			_exec "Configuring musl" "./configure $main_comp"
		fi

		_exec "Compiling libc" "make -j$threads"
		_exec "Installing libc" "make DESTDIR=$output_rootfs install"
		printf "Packaging libc headers..."
		mkdir -p "$output/$dist-libc-headers/files/opt"
		cp -r "$output_rootfs/opt/include" "$output/$dist-libc-headers/files/opt"
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/bin/$(basename $(echo $coreutils_dir | cut -d- -f1))" ]; then
		cd "$coreutils_dir"

		printf "Configuring Coreutils..."
		script -qeac "make defconfig 2>&1" "$logfile" >/dev/null
		if [ $(echo $coreutils_dir | grep "toybox") ]; then
			printf "CONFIG_SH=y\nCONFIG_DD=y\nCONFIG_EXPR=y\nCONFIG_INIT=y\nCONFIG_GETTY=y\nCONFIG_MDEV=y\n" >> .config
		fi
		echo "Done."
		_exec "Compiling Coreutils" "make CROSS_COMPILE=$toolchain_prefix/bin/$compile_target- CC=gcc -j$threads"
		printf "Installing Coreutils..."
		mv *box "$output_rootfs/bin"
		ln -s "/bin/$(basename $(echo $coreutils_dir | cut -d- -f1))" "$output_rootfs/bin/sh" 2>/dev/null || true
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/init" ]; then
		printf "Installing init script..."
		cp "$plfiles/initramfs-init" "$output_rootfs/init"
		chmod 777 "$output_rootfs/init"
		if [ -f "$output_rootfs/bin/toybox" ]; then
			sed -i 's/PUT_DYN_SYMLINK_TO_BOX_HERE/for i in $(toybox --long); do toybox ln -s \/bin\/toybox \/$i 2>\/dev\/null; done/g' "$output_rootfs/init"
			sed -i 's/BOX/toybox/g' "$output_rootfs/init"
		else
			sed -i 's/PUT_DYN_SYMLINK_TO_BOX_HERE/\/bin\/busybox --install -s/g' "$output_rootfs/init"
			sed -i 's/BOX/busybox/g' "$output_rootfs/init"
		fi
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/etc" ]; then
		printf "Installing etc files..."
		cp -r "$plfiles/etc" "$output_rootfs"
		chmod 777 "$output_rootfs/etc/init.d/rcS"
		if [ "$dist" = "musl" ]; then
			mv "$output_rootfs/etc/ld.so.conf" "$output_rootfs/etc/ld-musl-$(_generate_stuff musl).path"
		fi
		echo "Done."
	fi

	if [ ! -r "$output_rootfs/usr/bin/pl-setup" ]; then
		printf "Installing PortaLinux Package Installer & Setup..."
		cp "$plfiles/pl-utils/pl-install" "$output_rootfs/usr/bin"
		chmod 777 "$output_rootfs/usr/bin/pl-install"
		cp "$plfiles/pl-utils/pl-setup" "$output_rootfs/usr/bin"
		chmod 777 "$output_rootfs/usr/bin/pl-setup"
		echo "Done."
	fi
}

create_boot_image(){
	_rootfs_cleanup

	if [ $(id -u) -ne 0 ]; then
		echo "Error: You are not root"
		exit 3
	fi

	printf "Creating necessary device nodes..."
	mknod "$output_rootfs/dev/console" c 5 1 2>/dev/null || true
	mknod "$output_rootfs/dev/tty" c 5 0 2>/dev/null || true
	mknod "$output_rootfs/dev/null" c 1 3 2>/dev/null || true
	echo "Done."

	printf "Creating initramfs boot file..."
	cd "$output_rootfs"
	find . | cpio -H newc -ov > $output/rootfs.cpio 2>/dev/null
	$compression $output/rootfs.cpio
	echo "Done"
}

compile_extra_pkgs(){
	if [ ! -r "$output_rootfs/usr/bin/pl-install" ]; then
		compile_rootfs
	else
		_get_pkg_names $dist
	fi
	common_flags="--prefix=/opt --host=$compile_target"
	dev_stuff="$common_flags --disable-multilib --with-sysroot=/ --with-build-sysroot=$output_rootfs --with-native-system-header-dir=/opt/include"

	printf "Creating build folders..."
	for i in libstdc++ gcc linux-headers binutils bash make ncurses nano; do
		mkdir -p "$output/$i/files"
		printf "."
	done
	echo "Done"

	# libgcc and libstdc++
	_setup_gcc rfs
	_compile_pkg "$output/libstdc++/files/opt" "$gcc_dir" "Configuring GCC" "$dev_stuff $extra_gcc_flags --disable-bootstrap --disable-libstdcxx-debug --enable-languages=c,c++ --disable-libsanitizer" "Compiling GCC" "" "Packaging GCC C/C++ Compilers" "install-strip-gcc DESTDIR=$output/gcc/files" "Packaging libgcc" "install-strip-target-libgcc DESTDIR=$output/libstdc++/files" "Packaging libstdc++" "install-strip-target-libstdc++-v3 DESTDIR=$output/libstdc++/files"
	rm "$toolchain_prefix/bin/cc" -f
	rm "$toolchain_prefix/bin/c++" -f

	# linux headers
	if [ ! -d "$output/linux-headers/files/opt" ]; then
		cd "$linux_dir"

		_exec "Packaging Linux headers" "make ARCH=$linux_arch INSTALL_HDR_PATH=$output/linux-headers/files/opt headers_install"
	fi

	# binutils
	_compile_pkg "$output/binutils/files/opt" "$binutils_dir" "Configuring Binutils" "$dev_stuff" "Compiling Binutils" "" "Packaging Binutils" "install-strip DESTDIR=$output/binutils/files"

	# bash
	_compile_pkg "$output/bash/files/opt" "$bash_dir" "Configuring GNU Bash" "$common_flags --disable-gnu-malloc" "Compiling GNU Bash" "" "Packaging GNU Bash" "install-strip DESTDIR=$output/bash/files"

	# make
	_compile_pkg "$output/make/files/opt" "$make_dir" "Configuring GNU Make" "$common_flags --without-guile" "Compiling GNU Make" "" "Packaging GNU Make" "install-strip DESTDIR=$output/make/files"

	# ncurses
	_compile_pkg "$output/ncurses/files/opt/lib/libncurses.so" "$ncurses_dir" "Configuring Ncurses" "$common_flags --with-cxx-shared --with-shared --enable-overwrite --with-termlib" "Compiling Ncurses" "" "Packaging Ncurses" "install DESTDIR=$output/ncurses/files INSTALL_PROG='/usr/bin/install --strip-program=$compile_target-strip -c -s'"
	if [ -r "$ncurses_dir/build" ]; then
		_exec "Cleaning Ncurses" "rm -rf $ncurses_dir/build"
	fi
	_compile_pkg "$output/ncurses/files/opt/lib/libncursesw.so" "$ncurses_dir" "Configuring NcursesW" "$common_flags --with-cxx-shared --with-shared --enable-overwrite --with-termlib --enable-widec" "Compiling NcursesW" "" "Packaging NcursesW" "install DESTDIR=$output/ncurses/files INSTALL_PROG='/usr/bin/install --strip-program=$compile_target-strip -c -s'"

	# nano
	_compile_pkg "$output/nano/files/opt" "$nano_dir" "Configuring Nano" "$common_flags --enable-tiny --enable-utf8" "Compiling Nano" "" "Installing Nano" "install DESTDIR=$output/ncurses/files"

	_rootfs_cleanup

	printf "Creating packages..."
	for i in $dist-libc-headers libstdc++ gcc linux-headers binutils bash make ncurses nano; do
		cd "$output/$i"
		tar cf files.tar files
		sha256sum files.tar > files.tar.sha256sum
		printf "$i\n$(_generate_stuff pkg_ver $i)\n$arch\n" > pkg_info

		tar cf ../$i.tar files.tar files.tar.sha256sum pkg_info
		bzip2 ../$i.tar
		mv ../$i.tar.bz2 ../$i.plpak
		printf "."
	done
	echo "Done."
}

compile_kernel(){
	_get_pkg_names
	cd "$linux_dir"

	if [ ! -f .config ]; then
		echo "Error: Kernel has not been configured yet. Run $0 --config-kernel and try again"
		exit 4
	fi

	script -qeac "make CROSS_COMPILE=$compile_target- ARCH=$linux_arch -j$threads" "$logfile"

	modules_support=$(grep -w "CONFIG_MODULES" .config)
	if [ "$modules_support" != "" ] && [ "$(echo $modules_support | grep '#')" = "" ]; then
		script -qeac "make CROSS_COMPILE=$compile_target- ARCH=$linux_arch INSTALL_MOD_PATH=$output_rootfs modules_install" "$logfile"
	fi
	cp arch/$linux_arch/boot/dts/*.dtb "$output" 2>/dev/null || true
	cp arch/$linux_arch/boot/*Image "$output"
}

compile_bootloader(){
	_get_pkg_names

	_compile_pkg "$toolchain_prefix/sbin/$compile_target-grub-install" "$grub_dir" "Configuring GRUB" "--prefix=$toolchain_prefix --target=$compile_target --program-prefix=$compile_target- --with-platform=$grub_platform" "Compiling GRUB" "" "Installing GRUB Tools" "install"
	cp $grub_dir/build/grub-install ~/cross/bin/toolchain-grub-install
}

echo "PortaLinux Build System v0.09"
printf "(c) 2022 pocketlinux32 & raisinware, Under GPLv2+\n\n"

if [ $# -eq 0 ]; then
	echo "Error: No command given. Run $0 --help for a list of supported commands"
	exit 1
fi

trap "_exit_handler" EXIT INT HUP

while [ $# -gt 0 ]; do
	case $1 in
		"--init")
			_runtime_calc start
			_init "$2" $3
			_runtime_calc stop
			exit 0
			;;
		"--target-system")
			_target_system $2
			shift
			;;
		"--toolchain-prefix")
			toolchain_prefix="$2"
			shift
			;;
		"--test")
			set +e
			case $2 in
				toolchain)
					$compile_target-gcc --version
					;;
				pkg_parser)
					if [ ! -r "$build" ]; then
						echo "Error: You haven't initialized yet! Run $0 --init and try again"
						exit 6
					fi

					_get_pkg_names
					printf "$linux_dir\n$binutils_dir\n$gcc_dir\n$gmp_dir\n$mpc_dir\n$mpfr_dir\n$libc_dir\n$coreutils_dir\n$bash_dir\n"
					;;
				defconfig)
					if [ "$3" != "" ]; then
						kdefconfig=$4
					fi

					echo "Default config is $kdefconfig"
					;;
				build-all-t*)
					toolchain-prefix="$HOME/test"

					for i in pc earm earm64; do
						logfile="$pldir/log-$i/"
						_target_system $i
						setup_toolchain
						_pl_clean soft
					done

					_target_system i486-gnu
					_init

					for i in pc64 aarch64-gnu i686-gnu armv7-gnu; do
						logfile="$pldir/log-$i/"
						_target_system $i
						setup_toolchain
						_pl_clean soft
					done
					;;
			esac
			exit 0
			;;
		"--clean")
			_runtime_calc start
			_pl_clean soft $2
			_runtime_calc stop
			exit 0
			;;
		"--hard-clean")
			_runtime_calc start
			_pl_clean hard $2
			_runtime_calc stop
			exit 0
			;;
		"--threads")
			threads=$2
			shift
			;;
		"--build")
			action=$2
			if [ "$2" = "boot-img" ] && [ "$3" != "" ]; then
				compression="$3"
			fi
			shift
			;;
		"--config-kernel")
			_get_pkg_names
			cd "$linux_dir"

			if [ "$2" != "" ]; then
				kdefconfig=$2
			fi

			if [ ! -f .config ]; then
				make CROSS_COMPILE=$compile_target- ARCH=$linux_arch $kdefconfig
			fi

			make ARCH=$linux_arch menuconfig
			exit 0
			;;
		"--log-file")
			logfile=$2
			shift
			;;
		"--install-bootloader")
			
			;;
		"--help")
			printf "Usage: $0 {--target-system|--threads} [--init|--clean|--hard-clean|--build] [value]\n\n"
			echo "--init					Initializes the build system by downloading necessary components and unpacking them"
			echo "--target-system [arch-dist]		Specifies the CPU architecture and the C library to be used. Default: i486-musl"
			echo "--toolchain-prefix [path]		Sets the target system's toolchain's install directory. Default: ~/cross"
			echo "--clean [lvl]				Cleans the build directory"
			echo "--hard-clean [no-rm-tarballs]		Removes any directories created by $0"
			echo "--threads [n]				Sets the amount of threads to be used in compilation"
			echo "--config-kernel				Configures the Linux kernel"
			echo "--build [action] [option]		Compiles toolchain, rootfs, extra-pkgs, kernel or boot-img. The previous list of words are the supported operations."
			exit 0
			;;
		*)
			echo "Error: Unrecognized command. Run $0 --help for a list of supported commands."
			exit 2
			;;
	esac
	shift
done

echo "Log file: $logfile"
echo "Target System: $compile_target"
printf "Toolchain install directory: $toolchain_prefix\n\n"
_runtime_calc start
case $action in
	toolchain)
		setup_toolchain
		;;
	rootfs)
		compile_rootfs
		;;
	extra-pkgs)
		compile_extra_pkgs
		;;
	kernel)
		compile_kernel
		;;
	boot-img)
		create_boot_image
		;;
	bootloader)
		compile_bootloader
		;;
	*)
		echo "Error: Unknown build command. Run $0 --help for a list of supported commands."
		exit 4
		;;
esac
_runtime_calc stop
exit 0
