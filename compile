#!/bin/sh
set -e

pldir="$(pwd)"
logfile="$pldir/log.txt"
build="$pldir/build"
output="$pldir/output"
output_rootfs="$output/rootfs"
output_initramfs="$output/initramfs"
toolchain_prefix="$(echo ~/cross)"
threads=$(nproc)

compile_target="i486-pocket-linux-gnu"
linux_arch="x86"
arch="i486"
abi=""
dist="gnu"

start_time=""
end_time=""

_get_deps(){
	local URL="http://kernel.org/pub/linux/kernel/v5.x/linux-5.16.10.tar.xz http://busybox.net/downloads/busybox-1.34.1.tar.bz2"
	local PKG="binutils/binutils-2.37.tar.gz bison/bison-3.7.6.tar.gz gcc/gcc-10.3.0/gcc-10.3.0.tar.gz gmp/gmp-6.2.1.tar.xz make/make-4.3.tar.gz mpc/mpc-1.2.1.tar.gz mpfr/mpfr-4.1.0.tar.gz"

	if [ "$dist" = "musl" ]; then
		URL="$URL https://github.com/ghaerr/microwindows/archive/refs/heads/master.tar.gz https://musl.libc.org/releases/musl-1.2.3.tar.gz"
	else
		URL="$URL https://www.x.org/releases/X11R7.7/src/xserver/xorg-server-1.12.2.tar.bz2"
		PKG="$PKG libc/glibc-2.31.tar.gz bash/bash-5.1.tar.gz nano/nano-5.8.tar.gz ncurses/ncurses-6.2.tar.gz"
	fi

	for i in $PKG; do
		URL="$URL https://ftp.gnu.org/gnu/$i"
	done

	mkdir -p tarballs
	cd tarballs

	for i in $URL; do
		if [ ! -f "$(basename $i)" ]; then
			printf "Downloading $i..."
			wget -q --show-progress --progress=dot:giga "$i" $@
			local retVar=$?
			if [ $retVar -ne 0 ]; then
				echo "Error."
				echo "There was an error downloading required sources"
				cd .. && rm -rf tarballs
				exit 1
			fi
			echo "Done."
		else
			echo "$(basename $i) has already been downloaded. Skipping..."
		fi
	done
}

_validate_deps(){}

_decompress_all(){
	for i in $(ls | grep .tar); do
		printf "Unpacking archive $i..."
		case $i in
			*.gz)
				gunzip -c "$i" | tar xf -
				;;
			*.bz2)
				bunzip2 -c "$i" | tar xf -
				;;
			*.xz)
				xz -dc "$i" | tar xf -
				;;
		esac
		echo "Done."
	done
	echo "Decompressed all files successfully"
}

_runtime_calc(){
	set +e
	case $1 in
		start)
			start_time="$(date +%s)"
			printf "Operation started at $(date --date=@$start_time)\n\n"
			;;
		stop)
			end_time="$(date +%s)"
			local runtime="$(expr $end_time - $start_time)"
			local hours="$(expr $runtime / 3600)"
			local minutes=0
			printf "Operation took "

			if [ $hours -ne 0 ]; then
				printf "$hours hours"
				runtime="$(expr $runtime - $(expr $hours '*' 3600))"
				if [ $runtime -gt 60 ]; then
					printf ", "
				else
					printf " and "
				fi
			fi
			minutes="$(expr $runtime / 60)"

			if [ $minutes -ne 0 ]; then
				printf "$minutes minutes and "
				runtime="$(expr $runtime - $(expr $minutes '*' 60))"
			fi

			echo "$runtime seconds to complete"
			;;
	esac
	set -e
}

compile_toolchain(){
	cd $build

	# binutils
	if [ ! -r "$toolchain_prefix/bin/$compile_target-as" ]; then
		cd binutils-2.37
		mkdir -p build
		cd build
		printf "Configuring Binutils..."
		script -qeac "../configure --prefix=$toolchain_prefix --target=$compile_target --disable-multilib --disable-werror 2>&1" "$logfile" >/dev/null
		printf "Done\nCompiling Binutils..."
		script -qeac "make -j$threads 2>&1" "$logfile" >/dev/null
		printf "Done\nInstalling Binutils..."
		script -qeac "make install-strip 2>&1" "$logfile" >/dev/null
		echo "Done."
		cd ../..
	fi

	# gcc c/c++ compilers
	if [ ! -r "$toolchain_prefix/bin/$compile_target-gcc" ]; then
		local extra_flags=""
		if [ ! -f gcc-10.3.0/mpfr ]; then
			set +e
			ln $(pwd)/gmp-6.2.1 gcc-10.3.0/gmp -s
			ln $(pwd)/mpc-1.2.1 gcc-10.3.0/mpc -s
			ln $(pwd)/mpfr-4.1.0 gcc-10.3.0/mpfr -s
			set -e
		fi

		if [ "$dist" = "musl" ]; then
			extra_flags="--disable-libsanitizer --enable-initfini-array --with-arch=$arch --with-tune=generic"
		fi

		cd gcc-10.3.0
		mkdir -p build
		cd build
		printf "Configuring GCC..."
		script -qeac "../configure --prefix=$toolchain_prefix --target=$compile_target --disable-multilib --enable-languages=c,c++ --disable-libstdcxx-debug --disable-bootstrap $extra_flags" "$logfile" >/dev/null
		printf "Done\nCompiling GCC C/C++ compilers..."
		script -qeac "make -j$threads all-gcc 2>&1" >/dev/null
		printf "Done\nInstalling GCC C/C++ compilers..."
		script -qeac "make install-strip-gcc 2>&1" >/dev/null
		echo "Done"
		cd ../..
	fi

	# linux headers
	if [ ! -r "$toolchain_prefix/$compile_target/include/linux" ]; then
		cd linux-5.16.10
		printf "Installing Linux headers..."
		script -qeac "make ARCH=$linux_arch INSTALL_HDR_PATH=$toolchain_prefix/$compile_target headers_install 2>&1" "$logfile" >/dev/null
		echo "Done."
		cd ..
	fi

	# libc headers + start files (glibc-only)
	if [ ! -r "$toolchain_prefix/$compile_target/include/stdio.h" ]; then
		if [ "$dist" = "musl" ]; then
			cd musl-1.2.3
			printf "Installing musl headers..."
			script -qeac "make ARCH=$arch prefix=$toolchain_prefix/$compile_target install-headers 2>&1" "$logfile" >/dev/null
			echo "Done."
			cd ..
		else
			cd glibc-2.31
			mkdir -p build
			cd build
			printf "Configuring glibc..."
			script -qeac "../configure --prefix=$toolchain_prefix/$compile_target --host=$compile_target --disable-multilib --with-headers=$toolchain_prefix/$compile_target/include libc_cv_forced_unwind=yes 2>&1" "$logfile" >/dev/null
			printf "Done.\nInstalling glibc headers..."
			script -qeac "make install-bootstrap-headers=yes install-headers 2>&1" >/dev/null
			printf "Done.\nCompiling and installing glibc start files..."
			script -qeac "make -j$threads csu/subdir_lib CFLAGS_FOR_TARGET='-s -O2' CXXFLAGS_FOR_TARGET='-s -O2' 2>&1" "$logfile" >/dev/null
			install csu/crti.o csu/crtn.o csu/crt1.o $toolchain_prefix/$compile_target/lib
			echo "Done."
			cd $build
		fi
	fi

	# libgcc (libgcc-static for musl)
	if [ ! -r "$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a" ]; then
		local extra_flag=""
		cd gcc-10.3.0/build
		printf "Compiling libgcc"
		if [ "$dist" = "musl" ]; then
			printf "-static..."
			extra_flag="enable_shared=no"
		else
			printf "..."
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs.h"
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs-32.h"
			touch "$toolchain_prefix/$compile_target/include/gnu/stubs-64.h"
			$compile_target-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o "$toolchain_prefix/$compile_target/lib/libc.so"
		fi
		script -qeac "make -j$threads $extra_flag all-target-libgcc 2>&1" "$logfile" >/dev/null
		printf "Done.\Installing libgcc..."
		script -qeac "make install-strip-target-libgcc 2>&1" "$logfile" >/dev/null
		cd ../..
	fi

	# libc
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libc.so" ]; then
		if [ "$dist" = "musl" ]; then
			cd musl-1.2.3
			printf "Configuring musl..."
			script -qeac "ARCH=$arch CC=$compile_target-gcc CROSS_COMPILE=$compile_target- LIBCC=$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a ./configure --host=$compile_target --disable-multilib --prefix=~/cross/$compile_target 2>&1" "$logfile" >/dev/null
			printf "Done.\nCompiling musl..."
		else
			cd glibc-2.31/build
			printf "Compiling glibc..."
		fi

		script -qeac "make -j$threads AR=$compile_target-ar RANLIB=$compile_target-ranlib 2>&1" "$logfile" >/dev/null
		printf "Done.\n Installing libc..."
		script -qeac "make AR=$compile_target-ar RANLIB=$compile_target-ranlib install-strip" "$logfile" >/dev/null
		echo "Done."
		cd "$build"
	fi

	# libgcc-shared (musl-only)
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libgcc_s.so" ]; then
		cd gcc-10.3.0/build
		printf "Cleaning libgcc..."
		script -qeac "make -C $compile_target/libgcc distclean 2>&1" "$logfile" >/dev/null
		printf "Done.\nCompiling libgcc-shared..."
		script -qeac "make enable_shared=yes all-target-libgcc 2>&1" "$logfile" >/dev/null
		printf "Done.\nInstalling libgcc..."
		script -qeac "make install-strip-target-libgcc 2>&1" "$logfile" >/dev/null
		echo "Done."
		cd ../..
	fi

	# libstdc++
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libstdc++.so" ]; then
		cd gcc-10.3.0/build
		printf "Compiling libstdc++..."
		script -qeac "make -j$threads 2>&1" >/dev/null
		printf "Done.\Installing libstdc++..."
		script -qeac "make install-strip 2>&1" >/dev/null
		printf "Done.\n\n"
	fi
}

compile_rootfs(){
	if [ ! -r $toolchain_prefix/bin/$compile_target-gcc ]; then
		echo "Error: You do not have the compiler for system $compile_target installed. Please run $0 --build toolchain and try again"
		exit 1
	fi

	for i in bin dev sys proc lib opt sbin usr/bin usr/lib usr/sbin etc root mnt home tmp; do
		mkdir -p $output_rootfs/$i
	done

	if [ ! -r $output_rootfs/usr/lib/libc.a ]; then
		case $dist in
			gnu)
				cd $build/glibc-2.31
				mkdir -p build
				cd build
				../configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$compile_target \
				--dataroot=/opt/share --includedir=/opt/include libc_cv_forced_unwind=yes CFLAGS="-s -O2" \
				CXXFLAGS="-s -O2"

				mkdir -p $output_rootfs/opt/include/gnu
				touch $output_rootfs/opt/include/gnu/stubs.h
				touch $output_rootfs/opt/include/gnu/stubs-32.h
				touch $output_rootfs/opt/include/gnu/stubs-64.h
				;;
			musl)
				cd $build/musl-1.2.3
				./configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$compile_target \
				--datarootdir=/opt/share --includedir=/opt/include
				;;
		esac

		make -j$threads
		make install-strip DESTDIR=$output_rootfs
		cd $rootfs
	fi

	if [ ! -r $output_rootfs/usr/lib/libstdc++.a ]; then
		if [ "$dist" = "musl" ]; then
			extra_flag="--disable-libsanitizer"
		fi

		ln $build/gmp-6.2.1 $build/gcc-10.3.0/gmp -s 2>/dev/null
		ln $build/mpc-1.2.1 $build/gcc-10.3.0/mpc -s 2>/dev/null
		ln $build/mpfr-4.1.0 $build/gcc-10.3.0/mpfr -s 2>/dev/null

		ln -s $toolchain_prefix/bin/$compile_target-gcc $toolchain_prefix/bin/cc 2>/dev/null
		ln -s $toolchain_prefix/bin/$compile_target-g++ $toolchain_prefix/bin/c++ 2>/dev/null

		cd $build/gcc-10.3.0
		mkdir -p build
		cd build
		../configure --prefix=/usr --with-sysroot=/ --disable-multilib --disable-bootstrap \
		--host=$compile_target --disable-libstdcxx-debug --enable-languages=c,c++ \
		--with-build-sysroot=$output_rootfs --libexecdir=/opt/libexec --bindir=/opt/bin \
		--includedir=/opt/include --with-gxx-include-dir=/opt/include/c++/10.3.0 --datarootdir=/opt/share \
		--with-native-system-header-dir=/opt/include $extra_flag

		make -j$threads
		make install-strip-target-libgcc DESTDIR=$output_rootfs
		make install-strip-target-libstdc++-v3 DESTDIR=$output_rootfs

		rm $toolchain_prefix/bin/cc
		rm $toolchain_prefix/bin/c++
		cd $build
	fi

	if [ ! -r $output_rootfs/bin/busybox ]; then
		cd $build/busybox-1.34.1

		make defconfig
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$compile_target-" >> .config

		make -j$threads

		mv busybox $output_rootfs/bin
		ln -s /bin/busybox $output_rootfs/bin/sh
	fi

	if [ ! -r $output_rootfs/init ]; then
		cp $pldir/initramfs-init $output_rootfs/init
		chmod 777 $output_rootfs/init
	fi

	mkdir -p $output_rootfs/usr/include
	sudo mknod $output_rootfs/dev/console c 5 1
	sudo mknod $output_rootfs/dev/tty c 5 0
	sudo mknod $output_rootfs/dev/null c 1 3
}

compile_devrfs(){
	if [ ! -r $output_rootfs ]; then
		compile_rootfs
	fi

	if [ ! -r $output_rootfs/opt/include/linux ]; then
		cd $build/linux-5.16.10

		make ARCH=$(get_linuxarch) INSTALL_HDR_PATH=$output_rootfs/opt headers_install
		cd $build
	fi

	if [ ! -r $output_rootfs/opt/bin/as ]; then
		cd $build/binutils-2.36
		mkdir build
		cd build
		../configure --prefix=/usr --bindir=/opt/bin --datarootdir=/opt/share --with-sysroot=/ \
		--with-native-system-header-dir=/opt/include --disable-multilib --host=$compile_target

		make -j$threads
		make install-strip DESTDIR=$output_rootfs
		cd $build
	fi

	if [ ! -r $output_rootfs/opt/bin/g++ ]; then
		cd $build/gcc-10.3.0/build

		make install-strip DESTDIR=$output_rootfs
		cd $build
	fi

	if [ ! -r $output_rootfs/usr/bin/make ]; then
		cd $build/make-4.3
		mkdir build
		cd build
		../configure --prefix=/opt --host=$compile_target

		make -j$threads
		make install-strip DESTDIR=$output_rootfs
	fi
}

compile_kernel(){
	cd $build/linux-5.16.10

	if [ ! -f .config ]; then
		if [ "$dist" = "musl" ]; then
			make -s ARCH=$linux_arch allnoconfig
		else
			make -s ARCH=$linux_arch alldefconfig
		fi
	fi

	CC=$compile_target-gcc make -j$threads bzImage
	cp arch/$linux_arch/boot/bzImage $output
}

create_boot_image(){
	rm -rfv $output/rootfs/opt/*

	cd $output_rootfs
	find . | cpio -H newc -ov > $output/rootfs.cpio
	xz --check=crc32 -v $output/rootfs.cpio
}

printf "PortaLinux Build System v0.05\n\n"
while [ $# -gt 0 ]; do
	case $1 in
		"--init")
			_runtime_calc start
			if [ -d $build ]; then
				printf "Detected old build files, removing..."
				rm -rf $build
				echo "Done."
			fi

			_get_deps $fetch_args
			mkdir -p $build
			cd $pldir/tarballs
			_decompress_all
			for i in $(ls); do
				if [ -d $i ]; then
					mv $i $build
				fi
			done

			mkdir $toolchain_prefix $output -p
			if [ "$dist" = "gnu" ]; then
				sed -i 's/limits.h/linux\/limits.h/g' $build/gcc-10.3.0/libsanitizer/asan/asan_linux.cpp
				sed -i '20 i #include <bits/xopen_lim.h>' $build/busybox-1.34.1/include/libbb.h
			else
				cd $build/musl-1.2.3
				for i in arch crt; do
					cd $i
					for j in i486 i586 i686; do
						ln i386 $j -s
					done
					cd ..
				done
			fi
			_runtime_calc stop
			exit 0
			;;
		"--target-system")
			arch=$(echo $2 | cut -d- -f1)
			dist=$(echo $2 | cut -d- -f2)

			if [ $(echo $arch | grep -c armel) -ne 0 ]; then
				arch="arm"
				abi="eabi"
			elif [ $(echo $arch | grep -c armhf) -ne 0 ]; then
				arch="arm"
				abi="eabihf"
			fi

			if [ $(echo $arch | grep -c 86) -ne 0 ]; then
				linux_arch="x86"
			elif [ "$arch" = "aarch64" ]; then
				linux_arch="arm64"
			else
				linux_arch="$arch"
			fi

			compile_target="$arch-pocket-linux-$dist$abi"
			shift
			;;
		"--clean")
			_runtime_calc start
			set +e
			for i in $(ls $build); do
				printf "Cleaninig $i..."
				if [ -d $build/$i/build ]; then
					rm -rf $build/$i/build
				elif [ -r $build/$i/Makefile ]; then
					cd $build/$i
					make -s clean >/dev/null 2>&1
					make -s distclean >/dev/null 2>&1
				fi
				echo "Done."
			done
			_runtime_calc stop
			exit 0
			;;
		"--hard-clean")
			_runtime_calc start
			rm -rfv $build $output $pldir/tarballs
			_runtime_calc stop
			exit 0
			;;
		"--threads")
			threads=$2
			shift
			;;
		"--build")
			action=$2
			shift
			;;
		"--help")
			printf "Usage: $0 {--target-arch|--threads} [--init|--clean|--hard-clean|--build] [value]\n\n"
			echo "--init				Initializes the build system by downloading necessary components and unpacking them"
			echo "--target-system [arch-dist]	Specifies the CPU architecture and the C library to be used. The default target is i486-gnu"
			echo "--clean				Cleans the build directory"
			echo "--hard-clean			Removes any directories created by --init"
			echo "--threads [n]			Sets the amount of threads to be used in compilation"
			echo "--build [action]		Compiles toolchain, rootfs, devrfs or kernel. The previous list of words are the supported operations."
			exit 0
			;;
	esac
	shift
done

echo "Log file: $logfile"
echo "Target System: $compile_target"
printf "Toolchain install directory: $toolchain_prefix\n\n"
_runtime_calc start
compile_$action
_runtime_calc stop
