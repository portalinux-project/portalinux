#!/bin/sh
# SPDX-License-Identifier: GPL-2.0-or-later
set -e

# TODO: make modules only be sourced when they are needed
# TODO: refactor code in modules to use _exec() and _compile_pkg() when possible and useful
# TODO: maybe make a _timed_exec() and/or _timed_run() function to potentialy remove some additional redundant lines of code
# TODO: document the usage and params of every function
# TODO: document every modules needed dependencies in comments
# TODO: finish llvm support
# TODO: remove GCC dependency in compile_extra_pkgs()
# TODO: look into updating some of the packages (gcc and gnu make are some candidates)
# TODO: make script to check for new package releases (maybe even update some of the urls for us)

alias source="." # make source work on posix shells
pldir="$(dirname $(realpath $0))"
plfiles="$pldir/pl-files"

source "$plfiles/compile-modules/defaults.sh"

_exit_handler(){
	exit_num=$?

	if [ $exit_num -ne 0 ]; then
		if [ $exit_num -eq 130 ]; then
			echo "Interrupt!"
		else
			printf "\nSomething wrong happened. Please check $(basename $logfile) or the output above for more info.\n"
		fi
	fi

	exit $exit_num
}

_exec(){
	set +e
	printf "$1..."
	if [ "$4" = "no-silent" ] || [ "$3" = "no-silent" ]; then
		script -qeac "$2" "$logfile"
	else
		script -qeac "$2 2>&1" "$logfile" >/dev/null
	fi
	errno=$?
	if [ $errno -ne 0 ]; then
		echo "Error!"
		if [ "$3" = "" ]; then
			$3
		fi
		exit $errno
	fi
	echo "Done."
	set -e
}

_compile_pkg(){
	if [ ! -r "$1" ]; then
		cd "$2"
		if [ ! -r "$2/Makefile" ]; then
			mkdir -p "build" && cd "build"
		fi

		if [ ! -r "./Makefile" ] || [ "$exec_conf" = "y" ]; then
			if [ "$dir" = "" ]; then
				dir=".."
			fi
			_exec "$3" "$dir/configure $4"
		fi

		while [ $# -gt 4 ]; do
			_exec "$5" "make -j$threads $6"
			shift 2
		done
	fi
}

source "$plfiles/compile-modules/pkg/get_names.sh"

_generate_stuff(){
	case $1 in
		"musl")
			if [ "$arch" != "aarch64" ]; then
				echo $linux_arch
			else
				echo "aarch64"
			fi
			;;
		"pkg_ver")
			set +e
			pkg=$2
			if [ "$2" = "musl-libc-headers" ]; then
				pkg="musl"
			elif [ "$2" = "gnu-libc-headers" ]; then
				pkg="glibc"
			elif [ "$2" = "libstdc++" ]; then
				pkg="gcc"
			elif [ "$2" = "linux-headers" ]; then
				pkg="linux"
			fi
			set -e

			pkg_dir=$(ls $build | grep "$pkg")
			echo "$pkg_dir" | rev | cut -d- -f1 | rev
			;;
		"libdir")
			set +e
			if [ $(echo "$arch" | grep -c 64) -ne 0 ]; then
				libdir="lib64"
			fi
			set -e
			;;
	esac
}

_setup_gcc(){
	if [ ! -r "$gcc_dir/mpfr" ]; then
		ln "$gmp_dir" "$gcc_dir/gmp" -s 2>/dev/null || true
		ln "$mpc_dir" "$gcc_dir/mpc" -s 2>/dev/null || true
		ln "$mpfr_dir" "$gcc_dir/mpfr" -s 2>/dev/null || true
	fi

	if [ "$1" = "rfs" ]; then
		ln -s "$toolchain_prefix/bin/$compile_target-gcc" "$toolchain_prefix/bin/cc" 2>/dev/null || true
		ln -s "$toolchain_prefix/bin/$compile_target-g++" "$toolchain_prefix/bin/c++" 2>/dev/null || true
	fi
}

source "$plfiles/compile-modules/runtime_calc.sh"

_parse_platform(){
	set +e
	case $1 in
		android32 | earm)
			specific_arch="armv7"
			dist="musl"
			;;
		android64 | earm64)
			specific_arch="aarch64"
			dist="musl"
			;;
		pc | pc32)
			specific_arch="i486"
			dist="musl"
			;;
		pc64)
			specific_arch="x86_64"
			dist="gnu"
			;;
		*)
			if [ -f "$pldir/custom-platforms" ]; then
				. $pldir/custom-platforms $specific_arch
			fi

			if [ "$specific_arch" = "$dist" ]; then
				echo "Error: Unknown platform"
				exit 5
			fi
			;;
	esac
	set -e
}

_target_system(){
	specific_arch=$(echo $2 | cut -d- -f1)
	dist=$(echo $2 | cut -d- -f2)

	if [ "$specific_arch" = "$dist" ]; then
		_parse_platform $1
	fi

	if [ $(echo "$specific_arch" | grep -c arm) -ne 0 ]; then
		arch="arm"
		abi="eabi"
		linux_arch="$arch"
		with_aoc="--with-arch=$specific_arch"
		if [ $(echo "$specific_arch" | grep -c 7) -ne 0 ]; then
			abi="eabihf"
		fi
	elif [ $(echo "$specific_arch" | grep -c 86) -ne 0 ]; then
		arch="$specific_arch"
		if [ $(echo "$specific_arch" | grep -c i) -ne 0 ]; then
			linux_arch="i386"
		else
			linux_arch="x86_64"
		fi
	else
		arch="$specific_arch"
		if [ "$specific_arch" = "aarch64" ]; then
			linux_arch="arm64"
		else
			linux_arch="$arch"
		fi

		if [ "$arch" = "powerpc" ]; then
			with_aoc="--with-cpu=$specific_arch"
		fi
	fi

	compile_target="$arch-pocket-linux-$dist$abi"
}

setup_toolchain(){
	if [ "$LLVM" = "1" ]; then
		source "$plfiles/compile-modules/llvm.sh"
	else
		source "$plfiles/compile-modules/gcc.sh"
	fi

	compile_toolchain
}

echo "PortaLinux Build System v0.09"
printf "(c) 2022 pocketlinux32 & raisinware, Under GPLv2+\n\n"

if [ $# -eq 0 ]; then
	echo "Error: No command given. Run $0 --help for a list of supported commands"
	exit 1
fi

trap "_exit_handler" EXIT INT HUP

while [ $# -gt 0 ]; do
	case $1 in
		"--init")
			source "$plfiles/compile-modules/pkg/init.sh"
			_runtime_calc start
			_init "$2" $3
			_runtime_calc stop
			exit 0
			;;
		"--target-system")
			_target_system $2
			shift
			;;
		"--toolchain-prefix")
			toolchain_prefix="$2"
			shift
			;;
		"--test")
			source "$plfiles/compile-modules/test.sh"
			set +e
			_test $2
			exit 0
			;;
		"--clean" | "--hard-clean")
			_runtime_calc start
			source "$plfiles/compile-modules/clean.sh"
			args="$2 $3"
			if [ "$1" = "--hard-clean" ]; then
				args="4 $2"
			fi
			_pl_clean $args
			_runtime_calc stop
			exit 0
			;;
		"--threads")
			threads=$2
			shift
			;;
		"--build")
			action=$2
			if [ "$2" = "boot-img" ] && [ "$3" != "" ]; then
				compression="$3"
			fi
			shift
			;;
		"--config-kernel")
			source "$plfiles/compile-modules/kernel.sh"
			configure_kernel
			;;
		"--log-file")
			logfile=$2
			shift
			;;
		"--install-bootloader")
			#
			;;
		"--help")
			printf "Usage: $0 {--target-system|--threads} [--init|--clean|--hard-clean|--build] [value]\n\n"
			echo "--init					Initializes the build system by downloading necessary components and unpacking them"
			echo "--target-system [arch-dist]		Specifies the CPU architecture and the C library to be used. Default: i486-musl"
			echo "--toolchain-prefix [path]		Sets the target system's toolchain's install directory. Default: ~/cross"
			echo "--clean [lvl]				Cleans the build directory"
			echo "--hard-clean [no-rm-tarballs]		Removes any directories created by $0"
			echo "--threads [n]				Sets the amount of threads to be used in compilation"
			echo "--config-kernel				Configures the Linux kernel"
			echo "--build [action] [option]		Compiles toolchain, rootfs, extra-pkgs, kernel or boot-img. The previous list of words are the supported operations."
			exit 0
			;;
		*)
			echo "Error: Unrecognized command. Run $0 --help for a list of supported commands."
			exit 2
			;;
	esac
	shift
done

echo "Log file: $logfile"
echo "Target System: $compile_target"
printf "Toolchain install directory: $toolchain_prefix\n\n"
_runtime_calc start
case $action in
	toolchain)
		setup_toolchain
		;;
	rootfs | boot-img)
		source "$plfiles/compile-modules/rootfs.sh"
		compile_rootfs
		if [ "$action" = "boot-img" ]; then
			create_boot_image
		fi
		;;
	extra-pkgs)
		source "$plfiles/compile-modules/pkg/extra.sh"
		compile_extra_pkgs
		;;
	kernel)
		source "$plfiles/compile-modules/kernel.sh"
		compile_kernel
		;;
	bootloader)
		source "$plfiles/compile-modules/bootloader.sh"
		compile_bootloader
		;;
	*)
		echo "Error: Unknown build command. Run $0 --help for a list of supported commands."
		exit 4
		;;
esac
_runtime_calc stop
exit 0
