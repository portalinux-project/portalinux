#!/bin/sh
pldir=$(pwd)
rootdir=$pldir/build
output=$pldir/output
output_rootfs=$output/rootfs
output_initramfs=$output/initramfs

if [ "$toolchain_prefix" = "" ]; then
	toolchain_prefix=$(echo ~/cross)
fi

if [ "$arch" = "" ]; then
	arch="i486"
fi

if [ "$threads" = "" ]; then
	threads="$(nproc)"
fi

export PATH="$toolchain_prefix/bin:$PATH"


clean_rootdir(){
	for i in $(ls $rootdir); do
		if [ -d $rootdir/$i/build ]; then
			rm -rfv $rootdir/$i/build
		elif [ -r $rootdir/$i/Makefile ]; then
			cd $rootdir/$i && make clean && make distclean
		fi
	done
}

get_linuxarch(){
	if [ $(echo $arch | grep 86 -c) -ne 0 ]; then
		echo x86
	else
		echo $arch
	fi
}

init_script(){
	if [ -d $rootdir ]; then
		rm -rf build
	fi

	if [ ! -d tarballs ]; then
		./get-deps $@
	fi

	cd tarballs && ../decompress-all
	mkdir $rootdir

	for i in $(ls | grep -v .tar); do
		mv $i $rootdir
	done

	mkdir $toolchain_prefix $output -p
	sed -i 's/limits.h/linux\/limits.h/g' $rootdir/gcc-10.3.0/libsanitizer/asan/asan_linux.cpp
	sed -i '20 i #include <bits/xopen_lim.h>' $rootdir/busybox-1.34.1/include/libbb.h
	cd $rootdir
}

compile_toolchain(){
	# binutils
	if [ ! -r $toolchain_prefix/bin/$arch-pocket-linux-gnu-as ]; then
		cd $rootdir/binutils-2.36
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$arch-pocket-linux-gnu --disable-mutilib

		make -j$threads
		make install
	fi

	# gcc c/c++ compilers
	if [ ! -r $toolchain_prefix/bin/$arch-pocket-linux-gnu-gcc ]; then
		cd $rootdir

		ln $rootdir/gmp-6.2.1 gcc-10.3.0/gmp -s
		ln $rootdir/mpc-1.2.1 gcc-10.3.0/mpc -s
		ln $rootdir/mpfr-4.1.0 gcc-10.3.0/mpfr -s

		cd gcc-10.3.0
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$arch-pocket-linux-gnu --disable-multilib --enable-languages=c,c++

		make -j$threads all-gcc
		make install-gcc
		cd $rootdir
	fi

	# linux headers
	if [ ! -r $toolchain_prefix/$arch-pocket-linux-gnu/include/linux ]; then
		cd $rootdir/linux-5.16.10

		make ARCH=$(get_linuxarch) INSTALL_HDR_PATH=$toolchain_prefix/$arch-pocket-linux-gnu headers_install
		cd $rootdir
	fi

	# glibc header files
	if [ ! -r $toolchain_prefix/$arch-pocket-linux-gnu/include/stdio.h ]; then
		cd $rootdir/glibc-2.34
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix/$arch-pocket-linux-gnu --host=$arch-pocket-linux-gnu --disable-multilib \
		--with-headers=$toolchain_prefix/$arch-pocket-linux-gnu/include libc_cv_forced_unwind=yes

		make install-bootstrap-headers=yes install-headers
		make csu/subdir_lib
		install csu/crti.o csu/crtn.o csu/crt1.o $toolchain_prefix/$arch-pocket-linux-gnu/lib
		cd $rootdir
	fi

	# gcc support lib
	if [ ! -r $toolchain_prefix/$arch-pocket-linux-gnu/lib/libgcc_s.so.1 ]; then
		touch $toolchain_prefix/$arch-pocket-linux-gnu/include/gnu/stubs.h
		touch $toolchain_prefix/$arch-pocket-linux-gnu/include/gnu/stubs-32.h
		touch $toolchain_prefix/$arch-pocket-linux-gnu/include/gnu/stubs-64.h
		$arch-pocket-linux-gnu-gcc -nostdlib -nostartfiles -shared -x c /dev/null \
		-o $toolchain_prefix/$arch-pocket-linux-gnu/lib/libc.so

		cd $rootdir/gcc-10.3.0/build
		make -j$threads all-gcc
		make install-gcc
		make -j$threads all-target-libgcc
		make install-target-libgcc
		cd $rootdir
	fi

	# glibc libc.so
	if [ ! -r $toolchain_prefix/$arch-pocket-linux-gnu/lib/libc.a ]; then
		cd $rootdir/glibc-2.34/build

		make -j$threads
		make install
		cd $rootdir
	fi

	# gcc c++ library
	if [ ! -r $toolchain_prefix/$arch-pocket-linux-gnu/lib/libstdc++.a ]; then
		cd $rootdir/gcc-10.3.0/build

		make -j$threads
		make install
		cd $rootdir
	fi
}

compile_initramfs(){
	if ! command -v $arch-pocket-linux-gnu-gcc &> /dev/null; then
		compile_toolchain
		clean_rootdir
	fi

	for i in bin dev sys proc sbin usr/bin usr/sbin mnt; do
		mkdir -p $output/initramfs/$i
	done

	if [ ! -r $output_initramfs/bin/busybox ]; then
		cd $rootdir/busybox-1.34.1

		make defconfig
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$arch-pocket-linux-gnu-" >> .config
		echo "CONFIG_STATIC=y" >> .config

		make -j$threads

		mv busybox $output_initramfs/bin
		ln -s /bin/busybox $output_initramfs/bin/sh
	fi

	if [ ! -r $output_initramfs/init ]; then
		cp $pldir/initramfs-init $output_initramfs/init
		chmod 777 $output_initramfs/init
	fi
}

compile_rootfs(){
	if ! command -v $arch-pocket-linux-gnu-gcc &> /dev/null; then
		compile_toolchain
		clean_rootdir
	fi

	for i in bin dev sys proc lib sbin usr/bin usr/lib usr/sbin etc root mnt home tmp; do
		mkdir -p $output_rootfs/$i
	done

	if [ ! -r $output_rootfs/usr/bin/as ]; then
		cd $rootdir/binutils-2.36
		mkdir build
		cd build
		../configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$arch-pocket-linux-gnu

		make -j$threads
		make install DESTDIR=$output_rootfs
	fi

	if [ ! -r $output_rootfs/usr/include/linux ]; then
		cd $rootdir/linux-5.16.10
		if [ $(echo $arch | grep 86 -c) -ne 0 ]; then
			larch=x86
		else
			larch=$arch
		fi

		make ARCH=$larch INSTALL_HDR_PATH=$output_rootfs/usr headers_install
		cd $rootdir
	fi

	if [ ! -r $output_rootfs/usr/lib/libc.a ]; then
		cd $rootdir/glibc-2.34
		mkdir build
		cd build
		../configure --prefix=/usr --with-sysroot=/ --disable-multilib 	--host=$arch-pocket-linux-gnu \
		libc_cv_forced_unwind=yes

		make -j$threads
		make install DESTDIR=$output_rootfs
	fi

	if [ ! -r $output_rootfs/usr/lib/libstdc++.a ]; then
		ln $rootdir/gmp-6.2.1 $rootdir/gcc-10.3.0/gmp -s
		ln $rootdir/mpc-1.2.1 $rootdir/gcc-10.3.0/mpc -s
		ln $rootdir/mpfr-4.1.0 $rootdir/gcc-10.3.0/mpfr -s

		mkdir -p $output_rootfs/usr/include/gnu
		touch $output_rootfs/usr/include/gnu/stubs.h
		touch $output_rootfs/usr/include/gnu/stubs-32.h
		touch $output_rootfs/usr/include/gnu/stubs-64.h

		ln -s $toolchain_prefix/bin/$arch-pocket-linux-gnu-gcc $toolchain_prefix/bin/cc
		ln -s $toolchain_prefix/bin/$arch-pocket-linux-gnu-g++ $toolchain_prefix/bin/c++

		cd $rootdir/gcc-10.3.0
		mkdir build
		cd build
		../configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$arch-pocket-linux-gnu \
		--enable-languages=c,c++ --with-build-sysroot=$output_rootfs

		make -j$threads
		make install DESTDIR=$output_rootfs

		rm $toolchain_prefix/bin/cc
		rm $toolchain_prefix/bin/c++
	fi

	if [ ! -r $output_rootfs/bin/busybox ]; then
		cd $rootdir/busybox-1.34.1

		make defconfig
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$arch-pocket-linux-gnu-" >> .config

		make -j$threads

		mv busybox $output_rootfs/bin
		ln -s /bin/busybox $output_rootfs/bin/sh
	fi

	if [ ! -r $output_rootfs/usr/bin/make ]; then
		cd $rootdir/make-4.3
		mkdir build
		cd build
		../configure --prefix=/usr --host=$arch-pocket-linux-gnu

		make -j$threads
		make install DESTDIR=$output_rootfs
	fi

}

compile_kernel(){
	if [ ! -r $output_rootfs ]; then
		compile_rootfs
		clean_rootdir
	fi

	if [ ! -r $output_initramfs ]; then
		compile_initramfs
		clean_rootdir
	fi

	cd $output_rootfs
	find . | cpio -H newc -ov > $output_initramfs/rootfs.cpio
	xz -v $output_initramfs/rootfs.cpio

	cd $rootdir/linux-5.16.10
	make ARCH=$(get_linuxarch) defconfig

	patch .config $pldir/$(get_linuxarch)-linuxconf.patch

	sed -i "s/pl_initramfs/$output_initramfs/g" .config

	CC=$arch-pocket-linux-gnu-gcc make -j$threads bzImage
	cp arch/$(get_linuxarch)/boot/bzImage $output
}

script(){
	case $1 in
		help)
			echo "Usage:		$0 { help | init | soft-clean | hard-clean | build } [ options ] [ wget-flags ]"
			echo "		$0 help"
			echo "		$0 init [ wget-flags ]"
			echo "		$0 soft-clean { build | output }"
			echo "		$0 hard-clean"
			echo "		$0 build { toolchain | initramfs | rootfs | kernel } [ wget-flags ]"
			echo "Default:	$0 build kernel"
			;;
		init)
			init_script $2
			;;

		clean)
			case $2 in
				tarballs)
					rm -rfv build tarballs
					;;
				output)
					rm -rfv output
					;;

				build | *)
					clean_rootdir
					;;
			esac
			;;

		hard-clean)
			for i in $(ls); do
				if [ "$i" != "compile-script" ] && [ "$i" != "decompress-all" ] && [ "$i" != "get-deps" ] \
				&& [ "$i" != "initramfs-init" ] && [ $(echo "$i" | grep -c "linuxconf.patch") -eq 0 ] && \
				[ "$i" != "README.md" ]; then
					rm -rfv $i
				fi
			done
			;;

		build | *)
			if [ ! -d $rootdir ]; then
				init_script $4
			fi

			case $3 in
				toolchain)
					compile_toolchain
					;;

				initramfs)
					compile_initramfs
					;;

				rootfs)
					compile_rootfs
					;;

				kernel | *)
					compile_kernel
					;;
			esac
			;;
	esac
}

script $@
