#!/bin/sh
set -e
pldir=$(pwd)
build=$pldir/build
output=$pldir/output
output_rootfs=$output/rootfs
output_initramfs=$output/initramfs

compile_target=""
linux_arch=""

if [ "$toolchain_prefix" = "" ]; then
	toolchain_prefix=$(echo ~/cross)
fi

if [ "$threads" = "" ]; then
	threads="$(nproc)"
fi

export PATH="$toolchain_prefix/bin:$PATH"

_determine_target_type(){
	if [ "$arch" = "" ]; then
		arch="i486"
	fi

	if [ $(echo $arch | grep armel -c) -ne 0 ]; then
		arch="arm"
		abi="eabi"
	elif [ $(echo $arch | grep armhf -c) -ne 0 ]; then
		arch="arm"
		abi="eabihf"
	else
		abi=""
	fi

	if [ "$dist" = "" ]; then
		dist="gnu"
	fi

	compile_target="$arch-pocket-linux-$dist$abi"
}

_generate_linux_arch(){
	case $arch in
		*86)
			linux_arch=i386
			;;
		aarch64)
			linux_arch=arm64
			;;
		*)
			linux_arch=$arch
			;;
	esac
}

_get_deps(){
	local URL="http://kernel.org/pub/linux/kernel/v5.x/linux-5.16.10.tar.xz http://busybox.net/downloads/busybox-1.34.1.tar.bz2"
	local PKG="binutils/binutils-2.36.tar.gz bison/bison-3.7.6.tar.gz gcc/gcc-10.3.0/gcc-10.3.0.tar.gz gmp/gmp-6.2.1.tar.xz make/make-4.3.tar.gz mpc/mpc-1.2.1.tar.gz mpfr/mpfr-4.1.0.tar.gz"

	if [ "$dist" = "embedded" ]; then
		URL="$URL https://github.com/ghaerr/microwindows/archive/refs/heads/master.tar.gz https://musl.libc.org/releases/musl-1.2.3.tar.gz"
		shift 1
	else
		URL="$URL https://www.x.org/releases/X11R7.7/src/xserver/xorg-server-1.12.2.tar.bz2"
		PKG="$PKG libc/glibc-2.34.tar.gz bash/bash-5.1.tar.gz nano/nano-5.8.tar.gz ncurses/ncurses-6.2.tar.gz"
	fi

	for i in $PKG; do
		URL="$URL https://ftp.gnu.org/gnu/$i"
	done

	mkdir tarballs
	cd tarballs

	for i in $URL; do
		printf "Downloading $i..."
		wget -q --show-progress --progress=dot:giga "$i" $@
		local retVar=$?
		if [ retVar -ne 0 ]; then
			echo "Error."
			echo "There was an error downloading required sources"
			cd .. && rm -rf tarballs
			exit 1
		fi
		echo "Done."
	done
}

_decompress_all(){
	for i in $(ls | grep .gz); do
		gzip -dv $i
	done

	for i in $(ls | grep .bz2); do
		bunzip2 -v $i
	done

	for i in $(ls | grep .xz); do
		xz -dv $i
	done

	for i in $(ls | grep .tar); do
		tar -xvf $i
	done

	echo "Decompressed all files successfully"
}

soft_clean(){
	for i in $(ls $rootdir); do
		if [ -d $rootdir/$i/build ]; then
			rm -rfv $rootdir/$i/build
		elif [ -r $rootdir/$i/Makefile ]; then
			cd $rootdir/$i && make clean && make distclean
		fi
	done
}

hard_clean(){
	rm -rf $build $output $pldir/tarballs
}

pl_init(){
	if [ -d $build ]; then
		rm -rfv
	fi

	if [ ! -d tarballs ]; then
		_get_deps $@
	fi

	cd tarballs
	_decompress_all

	mkdir $toolchain_prefix $output -p
	sed -i 's/limits.h/linux\/limits.h/g' $build/gcc-10.3.0/libsanitizer/asan/asan_linux.cpp
	sed -i '20 i #include <bits/xopen_lim.h>' $build/busybox-1.34.1/include/libbb.h
	cd $build
}

compile_glibc_toolchain(){
	_determine_target_type
	_generate_linux_arch

	# binutils
	if [ ! -r $toolchain_prefix/bin/$compile_target-as ]; then
		cd $build/binutils-2.36
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$compile_target --disable-mutilib CFLAGS="-s -O2" \
		CXXFLAGS="-s -O2"

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install
	fi

	# gcc c/c++ compilers
	if [ ! -r $toolchain_prefix/bin/$compile_target-gcc ]; then
		cd $build

		ln $build/gmp-6.2.1 gcc-10.3.0/gmp -s
		ln $build/mpc-1.2.1 gcc-10.3.0/mpc -s
		ln $build/mpfr-4.1.0 gcc-10.3.0/mpfr -s

		cd gcc-10.3.0
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$compile_target --disable-multilib --enable-languages=c,c++ \
		--disable-libstdcxx-debug --disable-bootstrap CFLAGS="-s -O2" CXXFLAGS="-s -O2"

		make -j$threads all-gcc CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install-gcc
		cd $build
	fi

	# linux headers
	if [ ! -r $toolchain_prefix/$compile_target/include/linux ]; then
		cd $build/linux-5.16.10

		make ARCH=$(get_linuxarch) INSTALL_HDR_PATH=$toolchain_prefix/$compile_target headers_install
		cd $build
	fi

	# glibc header files
	if [ ! -r $toolchain_prefix/$compile_target/include/stdio.h ]; then
		cd $build/glibc-2.34
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix/$compile_target --host=$compile_target \
		--disable-multilib --with-headers=$toolchain_prefix/$compile_target/include libc_cv_forced_unwind=yes \
		CFLAGS="-s -O2" CXXFLAGS="-s -O2"

		make install-bootstrap-headers=yes install-headers
		make csu/subdir_lib CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		install csu/crti.o csu/crtn.o csu/crt1.o $toolchain_prefix/$compile_target/lib
		cd $build
	fi

	# gcc support lib
	if [ ! -r $toolchain_prefix/$compile_target/lib/libgcc_s.so.1 ]; then
		touch $toolchain_prefix/$compile_target/include/gnu/stubs.h
		touch $toolchain_prefix/$compile_target/include/gnu/stubs-32.h
		touch $toolchain_prefix/$compile_target/include/gnu/stubs-64.h
		$compile_target-gcc -nostdlib -nostartfiles -shared -x c /dev/null \
		-o $toolchain_prefix/$compile_target/lib/libc.so

		cd $build/gcc-10.3.0/build
		make -j$threads all-gcc CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install-gcc
		make -j$threads all-target-libgcc CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install-target-libgcc
		cd $build
	fi

	# glibc libc.so
	if [ ! -r $toolchain_prefix/$compile_target/lib/libc.a ]; then
		cd $build/glibc-2.34/build

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install
		cd $build
	fi

	# gcc c++ library
	if [ ! -r $toolchain_prefix/$compile_target/lib/libstdc++.a ]; then
		cd $build/gcc-10.3.0/build

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install
		cd $build
	fi
}

compile_musl_toolchain(){
	_determine_target_type
	_generate_linux_arch

	cd $build

	# musl headers
	if [ ! -r "$toolchain_prefix/$compile_target/include" ]; then
		cd musl-1.2.3
		make ARCH=i386 prefix=$toolchain_prefix/$compile_target install-headers
		cd ..
	fi

	# binutils
	if [ ! -r "$toolchain_prefix/bin/$compile_target-as" ]; then
		cd binutils-2.36
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$compile_target --disable-multilib --disable-werror
		make -j4
		make install-strip
		cd ../..
	fi

	# gcc compilers + libgcc static lib
	if [ ! -r "$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a" ]; then
		if [ ! -f gcc-10.3.0/mpfr ]; then
			set +e
			ln $(pwd)/gmp-6.2.1 gcc-10.3.0/gmp -s
			ln $(pwd)/mpc-1.2.1 gcc-10.3.0/mpc -s
			ln $(pwd)/mpfr-4.1.0 gcc-10.3.0/mpfr -s
			set -e
		fi
		cd gcc-10.3.0
		mkdir -p build
		cd build
		../configure --prefix=$toolchain_prefix --target=$compile_target --disable-multilib --disable-bootstrap --disable-libsanitizer --enable-initfini-array --with-arch=i686 --with-tune=generic --enable-languages=c,c++
		make -j4 all-gcc
		make -j4 enable_shared=no all-target-libgcc
		make install-strip-gcc
		make install-strip-target-libgcc
		cd ../..
	fi

	# musl libc
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libc.so" ]; then
		cd musl-1.2.3
		ARCH=i686 CC=$compile_target-gcc CROSS_COMPILE=$compile_target- LIBCC=$toolchain_prefix/lib/gcc/$compile_target/10.3.0/libgcc.a ./configure --host=$compile_target --disable-multilib --prefix=~/cross/$compile_target
		make -j4 AR=$compile_target-ar RANLIB=$compile_target-ranlib
		make AR=$compile_target-ar RANLIB=i486-pocket-linux-ranlib install
		cd ..
	fi

	# libgcc shared lib
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libgcc_s.so" ]; then
		cd gcc-10.3.0/build
		make -C $compile_target/libgcc distclean
		make enable_shared=yes all-target-libgcc
		make install-strip-target-libgcc
		cd ../..
	fi

	# linux headers
	if [ ! -r "$toolchain_prefix/$compile_target/include/linux" ]; then
		cd linux-5.16.10
		make ARCH=i386 INSTALL_HDR_PATH=$toolchain_prefix/$compile_target headers_install
		cd ..
	fi

	# libstdc++
	if [ ! -r "$toolchain_prefix/$compile_target/lib/libstdc++.so" ]; then
		cd gcc-10.3.0/build
		make -j4
		make install-strip
	fi
}

compile_initramfs(){
	for i in bin dev sys proc sbin usr/bin usr/sbin mnt; do
		mkdir -p $output/initramfs/$i
	done

	if [ ! -r $output_initramfs/bin/busybox ]; then
		cd $build/busybox-1.34.1

		make defconfig
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$compile_target-" >> .config
		echo "CONFIG_STATIC=y" >> .config

		make -j$threads

		mv busybox $output_initramfs/bin
		ln -s /bin/busybox $output_initramfs/bin/sh
	fi

	if [ ! -r $output_initramfs/init ]; then
		cp $pldir/initramfs-init $output_initramfs/init
		chmod 777 $output_initramfs/init
	fi

	sudo mknod $output_initramfs/dev/console c 5 1
	sudo mknod $output_initramfs/dev/tty c 5 0
	sudo mknod $output_initramfs/dev/null c 1 3
}

compile_rootfs(){
	for i in bin dev sys proc lib opt sbin usr/bin usr/lib usr/sbin etc root mnt home tmp; do
		mkdir -p $output_rootfs/$i
	done

	if [ ! -r $output_rootfs/usr/lib/libc.a ]; then
		case $dist in
			gnu)
				cd $build/glibc-2.34
				mkdir build
				cd build
				../configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$compile_target \
				--dataroot=/opt/share --includedir=/opt/include libc_cv_forced_unwind=yes CFLAGS="-s -O2" \
				CXXFLAGS="-s -O2"

				mkdir -p $output_rootfs/opt/include/gnu
				touch $output_rootfs/opt/include/gnu/stubs.h
				touch $output_rootfs/opt/include/gnu/stubs-32.h
				touch $output_rootfs/opt/include/gnu/stubs-64.h
				;;
			musl)
				cd $build/musl-1.2.3
				./configure --prefix=/usr --with-sysroot=/ --disable-multilib --host=$compile_target \
				--datarootdir=/opt/share --includedir=/opt/include CFLAGS="-s -O2" CXXFLAGS="-s -O2"
				;;
		esac

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install DESTDIR=$output_rootfs
		cd $rootfs
	fi

	if [ ! -r $output_rootfs/usr/lib/libstdc++.a ]; then
		if [ "$dist" = "musl" ]; then
			extra_flag="--disable-libsanitizer"
		fi

		ln $build/gmp-6.2.1 $build/gcc-10.3.0/gmp -s
		ln $build/mpc-1.2.1 $build/gcc-10.3.0/mpc -s
		ln $build/mpfr-4.1.0 $build/gcc-10.3.0/mpfr -s

		ln -s $toolchain_prefix/bin/$compile_target-gcc $toolchain_prefix/bin/cc
		ln -s $toolchain_prefix/bin/$compile_target-g++ $toolchain_prefix/bin/c++

		cd $build/gcc-10.3.0
		mkdir build
		cd build
		../configure --prefix=/usr --with-sysroot=/ --disable-multilib --disable-bootstrap \
		--host=$compile_target --disable-libstdcxx-debug --enable-languages=c,c++ \
		--with-build-sysroot=$output_rootfs --libexecdir=/opt/libexec --bindir=/opt/bin \
		--includedir=/opt/include --with-gxx-include-dir=/opt/include/c++/10.3.0 --datarootdir=/opt/share \
		--with-native-system-header-dir=/opt/include $extra_flag CFLAGS="-s -O2" CXXFLAGS="-s -O2"

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install-target-libgcc DESTDIR=$output_rootfs
		make install-target-libstdc++-v3 DESTDIR=$output_rootfs

		rm $toolchain_prefix/bin/cc
		rm $toolchain_prefix/bin/c++
		cd $build
	fi

	if [ ! -r $output_rootfs/bin/busybox ]; then
		cd $build/busybox-1.34.1

		make defconfig
		echo "CONFIG_CROSS_COMPILER_PREFIX=$toolchain_prefix/bin/$compile_target-" >> .config

		make -j$threads

		mv busybox $output_rootfs/bin
		ln -s /bin/busybox $output_rootfs/bin/sh
	fi

	if [ ! -r $output_rootfs/init ]; then
		cp $pldir/initramfs-init $output_rootfs/init
		chmod 777 $output_rootfs/init
	fi

	mkdir -p $output_rootfs/usr/include
	sudo mknod $output_rootfs/dev/console c 5 1
	sudo mknod $output_rootfs/dev/tty c 5 0
	sudo mknod $output_rootfs/dev/null c 1 3
}

compile_devrfs(){
	if [ ! -r $output_rootfs ]; then
		compile_rootfs
	fi

	if [ ! -r $output_rootfs/opt/include/linux ]; then
		cd $build/linux-5.16.10

		make ARCH=$(get_linuxarch) INSTALL_HDR_PATH=$output_rootfs/opt headers_install
		cd $build
	fi

	if [ ! -r $output_rootfs/opt/bin/as ]; then
		cd $build/binutils-2.36
		mkdir build
		cd build
		../configure --prefix=/usr --bindir=/opt/bin --datarootdir=/opt/share --with-sysroot=/ \
		--with-native-system-header-dir=/opt/include --disable-multilib --host=$compile_target \
		CFLAGS="-s -O2" CXXFLAGS="-s -O2"

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install DESTDIR=$output_rootfs
		cd $build
	fi

	if [ ! -r $output_rootfs/opt/bin/g++ ]; then
		cd $build/gcc-10.3.0/build

		make install-gcc DESTDIR=$output_rootfs
		cd $build
	fi

	if [ ! -r $output_rootfs/usr/bin/make ]; then
		cd $build/make-4.3
		mkdir build
		cd build
		../configure --prefix=/opt --host=$compile_target CFLAGS="-s -O2" CXXFLAGS="-s -O2"

		make -j$threads CFLAGS_FOR_TARGET="-s -O2" CXXFLAGS_FOR_TARGET="-s -O2"
		make install DESTDIR=$output_rootfs
	fi
}

compile_kernel(){
	if [ ! -r $output_rootfs ]; then
		compile_rootfs
	fi

	rm -rfv $output/rootfs/opt/*

	cd $output_rootfs
	find . | cpio -H newc -ov > $output/rootfs.cpio
	xz --check=crc32 -v $output/rootfs.cpio

	cd $build/linux-5.16.10
	make ARCH=$(get_linuxarch) allnoconfig

	patch .config $pldir/generic-linuxconf.patch
	patch .config $pldir/$(get_linuxarch)-linuxconf.patch

	CC=$compile_target-gcc make -j$threads bzImage
	cp arch/$(get_linuxarch)/boot/bzImage $output
}

case $1 in
	_*)
		echo "$1: command not found"
		;;
	*)
		$@
		;;
esac
